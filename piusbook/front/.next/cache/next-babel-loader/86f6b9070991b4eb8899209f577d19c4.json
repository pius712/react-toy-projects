{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\nimport { RetweetOutlined, HeartOutlined, HeartFilled, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST } from '../actions';\nimport Link from 'next/link';\nvar PostCardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__PostCardWrapper\",\n  componentId: \"v37uo4-0\"\n})([\"margin:10px 5px;\"]);\nvar Content = styled.div.withConfig({\n  displayName: \"PostCard__Content\",\n  componentId: \"v37uo4-1\"\n})([\"\"]);\nvar Image = styled.img.withConfig({\n  displayName: \"PostCard__Image\",\n  componentId: \"v37uo4-2\"\n})([\"\"]);\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var id = me && me.id;\n  var liked = post.Likers.find(function (liker) {\n    return liker.id === id;\n  }); // const [liked, setLiked] = useState(false);\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var onLike = useCallback(function () {\n    // setLiked(true);\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, []);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    } else {\n      dispatch({\n        type: RETWEET_REQUEST,\n        data: {\n          PostId: post.id\n        }\n      });\n    }\n  }, [id]);\n  var onUnlike = useCallback(function () {\n    // setLiked(false);\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (prev) {\n      return !prev;\n    });\n  }, [setCommentFormOpend]);\n  var onDeletePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: {\n        PostId: post.id\n      }\n    });\n  }, [dispatch, post]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    cover: post.Images && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), liked ? __jsx(HeartFilled, {\n      key: \"heart-filled\",\n      onClick: onUnlike\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        onClick: onDeletePost\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    }))],\n    extra: me && me.id !== post.User.id && __jsx(FollowButton, {\n      post: post\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(React.Fragment, null, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4.\")\n  }), __jsx(Card, {\n    cover: post.Retweet.Images && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: post.Retweet.User.nickname[0],\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  }))) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpend && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\\uC774 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"),\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        avatar: __jsx(Avatar, null, item.User.nickname),\n        author: item.User.nickname,\n        content: item.content\n      }));\n    }\n  })));\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}