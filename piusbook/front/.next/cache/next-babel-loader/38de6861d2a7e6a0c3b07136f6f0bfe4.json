{"ast":null,"code":"import { put, delay, takeLatest, all, fork, call, take } from 'redux-saga/effects';\nimport { registerUser, loginUser, logoutUser, fetchMyInfo } from '../API/index';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_SUCCESS } from '../actions';\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginUser, action.data); // yield delay(1000);\n\n    console.log(result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.log(error.response);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutUser); // yield delay(1000);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* signup(action) {\n  try {\n    const result = yield call(registerUser, action.data); // call(함수, 인자);\n    // {email, password, nickname}\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.log('sign_up_failure');\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE\n    });\n  }\n}\n\nfunction* loadMyInfo() {\n  try {\n    const result = yield call(fetchMyInfo);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      data: err.response.message\n    });\n  }\n}\n\nfunction* editNickname(action) {\n  try {\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      data: err.response.message\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watch login saga');\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLoadInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchEditNickname() {\n  yield takeLatest(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchFollow), fork(watchUnfollow), fork(watchLoadInfo), fork(watchEditNickname)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/user.js"],"names":["put","delay","takeLatest","all","fork","call","take","registerUser","loginUser","logoutUser","fetchMyInfo","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_FAILURE","EDIT_NICKNAME_SUCCESS","login","action","result","data","console","log","type","error","response","logout","signup","err","follow","unfollow","loadMyInfo","message","editNickname","editNicknameAPI","watchLogin","watchLogout","watchSignup","watchFollow","watchUnfollow","watchLoadInfo","watchEditNickname","userSaga"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n\ttake,\n} from 'redux-saga/effects';\nimport { registerUser, loginUser, logoutUser, fetchMyInfo } from '../API/index';\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_SUCCESS,\n\tLOG_IN_FAILURE,\n\tLOG_OUT_REQUEST,\n\tLOG_OUT_SUCCESS,\n\tLOG_OUT_FAILURE,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n\tFOLLOW_REQUEST,\n\tFOLLOW_SUCCESS,\n\tFOLLOW_FAILURE,\n\tUNFOLLOW_REQUEST,\n\tUNFOLLOW_SUCCESS,\n\tUNFOLLOW_FAILURE,\n\tLOAD_MY_INFO_REQUEST,\n\tLOAD_MY_INFO_SUCCESS,\n\tLOAD_MY_INFO_FAILURE,\n\tEDIT_NICKNAME_REQUEST,\n\tEDIT_NICKNAME_FAILURE,\n\tEDIT_NICKNAME_SUCCESS,\n} from '../actions';\n\nfunction* login(action) {\n\ttry {\n\t\tconst result = yield call(loginUser, action.data);\n\t\t// yield delay(1000);\n\t\tconsole.log(result);\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.log(error.response);\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE,\n\t\t\tdata: error.response.data,\n\t\t});\n\t}\n}\nfunction* logout() {\n\ttry {\n\t\tyield call(logoutUser);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_OUT_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: LOG_OUT_FAILURE,\n\t\t});\n\t}\n}\n\nfunction* signup(action) {\n\ttry {\n\t\tconst result = yield call(registerUser, action.data); // call(함수, 인자);\n\t\t// {email, password, nickname}\n\t\tconsole.log(result);\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS,\n\t\t});\n\t} catch (err) {\n\t\tconsole.log('sign_up_failure');\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* follow(action) {\n\ttry {\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: FOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: FOLLOW_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* unfollow(action) {\n\ttry {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_FAILURE,\n\t\t});\n\t}\n}\nfunction* loadMyInfo() {\n\ttry {\n\t\tconst result = yield call(fetchMyInfo);\n\t\tyield put({\n\t\t\ttype: LOAD_MY_INFO_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_MY_INFO_FAILURE,\n\t\t\tdata: err.response.message,\n\t\t});\n\t}\n}\nfunction* editNickname(action) {\n\ttry {\n\t\tconst result = yield call(editNicknameAPI, action.data);\n\t\tyield put({\n\t\t\ttype: EDIT_NICKNAME_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: EDIT_NICKNAME_FAILURE,\n\t\t\tdata: err.response.message,\n\t\t});\n\t}\n}\nfunction* watchLogin() {\n\tconsole.log('watch login saga');\n\tyield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n\tyield takeLatest(SIGN_UP_REQUEST, signup);\n}\nfunction* watchFollow() {\n\tyield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n\tyield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchLoadInfo() {\n\tyield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\nfunction* watchEditNickname() {\n\tyield takeLatest(EDIT_NICKNAME_REQUEST, editNickname);\n}\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchLogin),\n\t\tfork(watchLogout),\n\t\tfork(watchSignup),\n\t\tfork(watchFollow),\n\t\tfork(watchUnfollow),\n\t\tfork(watchLoadInfo),\n\t\tfork(watchEditNickname),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}