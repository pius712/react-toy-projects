{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { put, delay, takeEvery, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS } from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(uploadPost, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data // data: {\n            // \tid,\n            // \tcontent: action.data,\n            // },\n\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id // data: id,\n\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.message\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadComment, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data // data: action.data,\n\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.message\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_OF_MINE,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(fetchPost);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data // data: generateDummyPost(10),\n\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context4.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["addPost","addComment","removePost","loadPost","watchAddPost","watchAddComment","watchRemovePost","watchLoadPost","postSaga","put","delay","takeEvery","takeLatest","all","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","shortid","generateDummyPost","uploadPost","uploadComment","fetchPost","action","data","result","type","id","error","response","message","console"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n\tLOAD_POST_REQUEST,\n\tLOAD_POST_FAILURE,\n\tLOAD_POST_SUCCESS,\n} from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\nfunction* addPost(action) {\n\t// console.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// yield delay(1000);\n\t\t// const id = shortid.generate();\n\t\tconst result = yield call(uploadPost, action.data);\n\t\t// result {content, PostId, UserId}\n\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: {\n\t\t\t// \tid,\n\t\t\t// \tcontent: action.data,\n\t\t\t// },\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t\t// data: id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(uploadComment, action.data);\n\t\t// yield delay(1000);\n\t\t// result = {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.message,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: error,\n\t\t});\n\t}\n}\nfunction* loadPost(action) {\n\ttry {\n\t\tconst result = yield call(fetchPost);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POST_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\t// console.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\t// console.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchAddComment),\n\t\tfork(watchRemovePost),\n\t\tfork(watchLoadPost),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}