{"ast":null,"code":"var _jsxFileName = \"/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/components/CommentForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux'; // import { ADD_COMMENT_REQUEST } from '../actions';\n\nimport { addCommentRequest } from '../reducer/post';\n\nconst CommentForm = ({\n  post\n}) => {\n  const {\n    0: comment,\n    1: setComment\n  } = useState('');\n  const me = useSelector(state => state.user.me);\n  const id = me && me.id;\n  const {\n    addCommentDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (addCommentDone) {\n      setComment('');\n    }\n  }, [addCommentDone]);\n  const onChangeComment = useCallback(e => {\n    setComment(e.target.value);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    dispatch(addCommentRequest({\n      content: comment,\n      postId: post.id,\n      userId: id\n    }));\n  }, [comment, id, dispatch, post]);\n  return __jsx(\"form\", {\n    onSubmit: onSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, __jsx(\"textarea\", {\n    rows: \"4\",\n    value: comment,\n    onChange: onChangeComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }), __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }, \"\\uC0DD\\uC131\"));\n};\n\nCommentForm.propTypes = {\n  post: propTypes.object\n};\nexport default CommentForm;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/components/CommentForm.js"],"names":["React","useState","useCallback","useEffect","propTypes","useSelector","useDispatch","addCommentRequest","CommentForm","post","comment","setComment","me","state","user","id","addCommentDone","dispatch","onChangeComment","e","target","value","onSubmitComment","preventDefault","content","postId","userId","object"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMW,EAAE,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,EAArB,CAAtB;AACA,QAAMG,EAAE,GAAGH,EAAE,IAAIA,EAAE,CAACG,EAApB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACJ,IAAhB,CAAtC;AACA,QAAMQ,QAAQ,GAAGX,WAAW,EAA5B;AACAH,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIa,cAAJ,EAAoB;AACnBL,MAAAA,UAAU,CAAC,EAAD,CAAV;AACA;AACD,GAJQ,EAIN,CAACK,cAAD,CAJM,CAAT;AAKA,QAAME,eAAe,GAAGhB,WAAW,CAACiB,CAAC,IAAI;AACxCR,IAAAA,UAAU,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACA,GAFkC,EAEhC,EAFgC,CAAnC;AAGA,QAAMC,eAAe,GAAGpB,WAAW,CAClCiB,CAAC,IAAI;AACJA,IAAAA,CAAC,CAACI,cAAF;AACAN,IAAAA,QAAQ,CACPV,iBAAiB,CAAC;AACjBiB,MAAAA,OAAO,EAAEd,OADQ;AAEjBe,MAAAA,MAAM,EAAEhB,IAAI,CAACM,EAFI;AAGjBW,MAAAA,MAAM,EAAEX;AAHS,KAAD,CADV,CAAR;AAOA,GAViC,EAWlC,CAACL,OAAD,EAAUK,EAAV,EAAcE,QAAd,EAAwBR,IAAxB,CAXkC,CAAnC;AAaA,SACC;AAAM,IAAA,QAAQ,EAAEa,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAU,IAAA,IAAI,EAAC,GAAf;AAAmB,IAAA,KAAK,EAAEZ,OAA1B;AAAmC,IAAA,QAAQ,EAAEQ,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,CADD;AAMA,CAjCD;;AAmCAV,WAAW,CAACJ,SAAZ,GAAwB;AACvBK,EAAAA,IAAI,EAAEL,SAAS,CAACuB;AADO,CAAxB;AAGA,eAAenB,WAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { ADD_COMMENT_REQUEST } from '../actions';\nimport { addCommentRequest } from '../reducer/post';\nconst CommentForm = ({ post }) => {\n\tconst [comment, setComment] = useState('');\n\tconst me = useSelector(state => state.user.me);\n\tconst id = me && me.id;\n\tconst { addCommentDone } = useSelector(state => state.post);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tif (addCommentDone) {\n\t\t\tsetComment('');\n\t\t}\n\t}, [addCommentDone]);\n\tconst onChangeComment = useCallback(e => {\n\t\tsetComment(e.target.value);\n\t}, []);\n\tconst onSubmitComment = useCallback(\n\t\te => {\n\t\t\te.preventDefault();\n\t\t\tdispatch(\n\t\t\t\taddCommentRequest({\n\t\t\t\t\tcontent: comment,\n\t\t\t\t\tpostId: post.id,\n\t\t\t\t\tuserId: id,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t\t[comment, id, dispatch, post],\n\t);\n\treturn (\n\t\t<form onSubmit={onSubmitComment}>\n\t\t\t<textarea rows=\"4\" value={comment} onChange={onChangeComment}></textarea>\n\t\t\t<button>생성</button>\n\t\t</form>\n\t);\n};\n\nCommentForm.propTypes = {\n\tpost: propTypes.object,\n};\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}