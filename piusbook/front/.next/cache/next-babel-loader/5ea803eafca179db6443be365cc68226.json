{"ast":null,"code":"import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', HYDRATE);\n      return action.payload;\n\n    default:\n      {\n        // 리듀서는 결국 state, action을 받는 함수이다. 그리고 state를 반환한다.\n        // combineReducer를 호출하면 이 함수가 나온다.\n        var combinedReducer = combineReducers(user, post);\n        return combinedReducer(state, action);\n      }\n  }\n}; // 이전 코드\n// const rootReducer = combineReducers({\n// \tindex: (state = {}, action) => {\n// \t\tswitch (action.type) {\n// \t\t\tcase HYDRATE:\n// \t\t\t\treturn { ...state, ...action.payload };\n// \t\t\tdefault:\n// \t\t\t\treturn state;\n// \t\t}\n// \t},\n// \tuser,\n// \tpost,\n// });\n\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/reducer/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKP,OAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBT,OAAvB;AACA,aAAOM,MAAM,CAACI,OAAd;;AAED;AAAS;AACR;AACA;AACA,YAAMC,eAAe,GAAGV,eAAe,CAACC,IAAD,EAAOC,IAAP,CAAvC;AACA,eAAOQ,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACA;AAVF;AAYA,CAbD,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nconst rootReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase HYDRATE:\n\t\t\tconsole.log('HYDRATE', HYDRATE);\n\t\t\treturn action.payload;\n\n\t\tdefault: {\n\t\t\t// 리듀서는 결국 state, action을 받는 함수이다. 그리고 state를 반환한다.\n\t\t\t// combineReducer를 호출하면 이 함수가 나온다.\n\t\t\tconst combinedReducer = combineReducers(user, post);\n\t\t\treturn combinedReducer(state, action);\n\t\t}\n\t}\n};\n\n// 이전 코드\n// const rootReducer = combineReducers({\n// \tindex: (state = {}, action) => {\n// \t\tswitch (action.type) {\n// \t\t\tcase HYDRATE:\n// \t\t\t\treturn { ...state, ...action.payload };\n// \t\t\tdefault:\n// \t\t\t\treturn state;\n// \t\t}\n// \t},\n// \tuser,\n// \tpost,\n// });\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}