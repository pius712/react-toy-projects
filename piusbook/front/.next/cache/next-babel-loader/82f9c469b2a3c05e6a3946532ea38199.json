{"ast":null,"code":"import axios from 'axios'; // Cors 문제로 인해서 백엔드로 cookie를 보내지 않는 문제를\n// withCredentials: true 옵션을 주어서 해결\n// const instance = axios.create({\n// \tbaseURL: 'http://localhost:8080/',\n// });\n\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.defaults.withCredentials = true;\n\nvar loginUser = function loginUser(data) {\n  return axios.post('user/login', data);\n};\n\nvar registerUser = function registerUser(data) {\n  return axios.post('user', data); // data = {email, password, nickname}\n};\n\nvar logoutUser = function logoutUser() {\n  return axios.post('user/logout');\n}; // 게시글 업로드\n// data = {conetent: text}\n// postform.js\n\n\nvar uploadPost = function uploadPost(data) {\n  return axios.post('post', data);\n}; // 댓글 업로드\n// data = {\n// \tcontent: comment,\n// \tpostId: post.id,\n// \tuserId: id,\n// }\n// commentForm.js\n\n\nvar uploadComment = function uploadComment(data) {\n  return axios.post(\"post/\".concat(data.postId, \"/comment\"), data);\n};\n\nvar fetchPost = function fetchPost() {\n  return axios.get('post');\n};\n\nvar fetchMyInfo = function fetchMyInfo() {\n  return axios.get('user');\n};\n\nvar likePostAPI = function likePostAPI(data) {\n  return axios.patch(\"post/\".concat(data.postId, \"/like\"));\n};\n\nvar unlikePostAPI = function unlikePostAPI(data) {\n  return axios.patch(\"post/\".concat(data.postId, \"/unlike\"));\n};\n\nvar editNicknameAPI = function editNicknameAPI(data) {\n  return axios.patch('user/edit/nickname', data);\n};\n\nvar removePostAPI = function removePostAPI(data) {\n  return axios[\"delete\"](\"post/\".concat(data.PostId, \"/delete\"));\n};\n\nexport { registerUser, loginUser, logoutUser, uploadPost, uploadComment, fetchMyInfo, fetchPost, likePostAPI, unlikePostAPI, editNicknameAPI, removePostAPI };","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/API/index.js"],"names":["axios","defaults","baseURL","withCredentials","loginUser","data","post","registerUser","logoutUser","uploadPost","uploadComment","postId","fetchPost","get","fetchMyInfo","likePostAPI","patch","unlikePostAPI","editNicknameAPI","removePostAPI","PostId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AACAF,KAAK,CAACC,QAAN,CAAeE,eAAf,GAAiC,IAAjC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI,EAAI;AACzB,SAAOL,KAAK,CAACM,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACA,CAFD;;AAGA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAAAF,IAAI,EAAI;AAC5B,SAAOL,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBD,IAAnB,CAAP,CAD4B,CAE5B;AACA,CAHD;;AAKA,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,SAAOR,KAAK,CAACM,IAAN,CAAW,aAAX,CAAP;AACA,CAFD,C,CAIA;AACA;AACA;;;AAEA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAAAJ,IAAI,EAAI;AAC1B,SAAOL,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBD,IAAnB,CAAP;AACA,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAL,IAAI,EAAI;AAC7B,SAAOL,KAAK,CAACM,IAAN,gBAAmBD,IAAI,CAACM,MAAxB,eAA0CN,IAA1C,CAAP;AACA,CAFD;;AAIA,IAAMO,SAAS,GAAG,SAAZA,SAAY,GAAM;AACvB,SAAOZ,KAAK,CAACa,GAAN,CAAU,MAAV,CAAP;AACA,CAFD;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,SAAOd,KAAK,CAACa,GAAN,CAAU,MAAV,CAAP;AACA,CAFD;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAV,IAAI,EAAI;AAC3B,SAAOL,KAAK,CAACgB,KAAN,gBAAoBX,IAAI,CAACM,MAAzB,WAAP;AACA,CAFD;;AAGA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAZ,IAAI,EAAI;AAC7B,SAAOL,KAAK,CAACgB,KAAN,gBAAoBX,IAAI,CAACM,MAAzB,aAAP;AACA,CAFD;;AAIA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAAAb,IAAI,EAAI;AAC/B,SAAOL,KAAK,CAACgB,KAAN,CAAY,oBAAZ,EAAkCX,IAAlC,CAAP;AACA,CAFD;;AAGA,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAAAd,IAAI,EAAI;AAC7B,SAAOL,KAAK,UAAL,gBAAqBK,IAAI,CAACe,MAA1B,aAAP;AACA,CAFD;;AAGA,SACCb,YADD,EAECH,SAFD,EAGCI,UAHD,EAICC,UAJD,EAKCC,aALD,EAMCI,WAND,EAOCF,SAPD,EAQCG,WARD,EASCE,aATD,EAUCC,eAVD,EAWCC,aAXD","sourcesContent":["import axios from 'axios';\n\n// Cors 문제로 인해서 백엔드로 cookie를 보내지 않는 문제를\n// withCredentials: true 옵션을 주어서 해결\n// const instance = axios.create({\n// \tbaseURL: 'http://localhost:8080/',\n// });\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.defaults.withCredentials = true;\n\nconst loginUser = data => {\n\treturn axios.post('user/login', data);\n};\nconst registerUser = data => {\n\treturn axios.post('user', data);\n\t// data = {email, password, nickname}\n};\n\nconst logoutUser = () => {\n\treturn axios.post('user/logout');\n};\n\n// 게시글 업로드\n// data = {conetent: text}\n// postform.js\n\nconst uploadPost = data => {\n\treturn axios.post('post', data);\n};\n\n// 댓글 업로드\n// data = {\n// \tcontent: comment,\n// \tpostId: post.id,\n// \tuserId: id,\n// }\n// commentForm.js\nconst uploadComment = data => {\n\treturn axios.post(`post/${data.postId}/comment`, data);\n};\n\nconst fetchPost = () => {\n\treturn axios.get('post');\n};\nconst fetchMyInfo = () => {\n\treturn axios.get('user');\n};\n\nconst likePostAPI = data => {\n\treturn axios.patch(`post/${data.postId}/like`);\n};\nconst unlikePostAPI = data => {\n\treturn axios.patch(`post/${data.postId}/unlike`);\n};\n\nconst editNicknameAPI = data => {\n\treturn axios.patch('user/edit/nickname', data);\n};\nconst removePostAPI = data => {\n\treturn axios.delete(`post/${data.PostId}/delete`);\n};\nexport {\n\tregisterUser,\n\tloginUser,\n\tlogoutUser,\n\tuploadPost,\n\tuploadComment,\n\tfetchMyInfo,\n\tfetchPost,\n\tlikePostAPI,\n\tunlikePostAPI,\n\teditNicknameAPI,\n\tremovePostAPI,\n};\n"]},"metadata":{},"sourceType":"module"}