{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nconst rootReducer = (state = {}, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      {\n        const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n        if (state.user) nextState.user = state.user;else if (state.post) nextState.post = state.post;\n        return nextState;\n      }\n\n    default:\n      return combineReducers(state, action);\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/reducer/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","state","action","type","nextState","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKP,OAAL;AAAc;AACb,cAAMQ,SAAS,mCACXH,KADW,GAEXC,MAAM,CAACG,OAFI,CAAf;;AAIA,YAAIJ,KAAK,CAACH,IAAV,EAAgBM,SAAS,CAACN,IAAV,GAAiBG,KAAK,CAACH,IAAvB,CAAhB,KACK,IAAIG,KAAK,CAACF,IAAV,EAAgBK,SAAS,CAACL,IAAV,GAAiBE,KAAK,CAACF,IAAvB;AACrB,eAAOK,SAAP;AACA;;AACD;AACC,aAAOP,eAAe,CAACI,KAAD,EAAQC,MAAR,CAAtB;AAXF;AAaA,CAdD;;AAgBA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nconst rootReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase HYDRATE: {\n\t\t\tconst nextState = {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t};\n\t\t\tif (state.user) nextState.user = state.user;\n\t\t\telse if (state.post) nextState.post = state.post;\n\t\t\treturn nextState;\n\t\t}\n\t\tdefault:\n\t\t\treturn combineReducers(state, action);\n\t}\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}