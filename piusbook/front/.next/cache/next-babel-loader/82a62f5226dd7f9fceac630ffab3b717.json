{"ast":null,"code":"import { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../actions';\n\nfunction* login(action) {\n  console.log('lgoin saga');\n\n  try {\n    // const result = yield call();\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.message\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    // yield call();\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* signup() {\n  try {\n    // yield call();\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watch login saga');\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(LOG_OUT_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/user.js"],"names":["put","delay","takeLatest","all","fork","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","login","action","console","log","type","data","error","response","message","logout","signup","watchLogin","watchLogout","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,SACCC,cADD,EAECC,cAFD,EAGCC,cAHD,EAICC,eAJD,EAKCC,eALD,EAMCC,eAND,EAOCC,eAPD,EAQCC,eARD,EASCC,eATD,QAUO,YAVP;;AAWA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,MAAI;AACH;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAEZ,cADG;AAETa,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFJ,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOC,KAAP,EAAc;AACf,UAAMpB,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAEX,cADG;AAETY,MAAAA,IAAI,EAAEC,KAAK,CAACC,QAAN,CAAeC;AAFZ,KAAD,CAAT;AAIA;AACD;;AACD,UAAUC,MAAV,GAAmB;AAClB,MAAI;AACH;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAET;AADG,KAAD,CAAT;AAGA,GAND,CAME,MAAM;AACP,UAAMT,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAER;AADG,KAAD,CAAT;AAGA;AACD;;AACD,UAAUc,MAAV,GAAmB;AAClB,MAAI;AACH;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAEN;AADG,KAAD,CAAT;AAGA,GAND,CAME,MAAM;AACP,UAAMZ,GAAG,CAAC;AACTkB,MAAAA,IAAI,EAAEL;AADG,KAAD,CAAT;AAGA;AACD;;AAED,UAAUY,UAAV,GAAuB;AACtBT,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,QAAMf,UAAU,CAACG,cAAD,EAAiBS,KAAjB,CAAhB;AACA;;AAED,UAAUY,WAAV,GAAwB;AACvB,QAAMxB,UAAU,CAACM,eAAD,EAAkBe,MAAlB,CAAhB;AACA;;AACD,UAAUI,WAAV,GAAwB;AACvB,QAAMzB,UAAU,CAACM,eAAD,EAAkBgB,MAAlB,CAAhB;AACA;;AAED,eAAe,UAAUI,QAAV,GAAqB;AACnC,QAAMzB,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAD,CAAL,EAAmBrB,IAAI,CAACsB,WAAD,CAAvB,EAAsCtB,IAAI,CAACuB,WAAD,CAA1C,CAAD,CAAT;AACA","sourcesContent":["import { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_SUCCESS,\n\tLOG_IN_FAILURE,\n\tLOG_OUT_REQUEST,\n\tLOG_OUT_SUCCESS,\n\tLOG_OUT_FAILURE,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n} from '../actions';\nfunction* login(action) {\n\tconsole.log('lgoin saga');\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE,\n\t\t\tdata: error.response.message,\n\t\t});\n\t}\n}\nfunction* logout() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_OUT_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: LOG_OUT_FAILURE,\n\t\t});\n\t}\n}\nfunction* signup() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t});\n\t}\n}\n\nfunction* watchLogin() {\n\tconsole.log('watch login saga');\n\tyield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n\tyield takeLatest(LOG_OUT_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n\tyield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}\n"]},"metadata":{},"sourceType":"module"}