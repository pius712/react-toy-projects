{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadAPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(loadUser),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAPost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUser),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { put, delay, takeEvery, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE, LIKE_POST_SUCCESS, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_A_POST_REQUEST, LOAD_A_POST_SUCCESS, LOAD_A_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE } from '../actions/index'; // import shortid from 'shortid';\n// import { generateDummyPost } from '../reducer/post';\n\nimport { uploadPost, uploadComment, fetchPost, likePostAPI, unlikePostAPI, removePostAPI, uploadImagesAPI, retweetAPI, loadAPostAPI, loadUserPostsAPI, loadHashtagPostsAPI } from '../API/index';\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(uploadPost, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data // data: {\n            // \tid,\n            // \tcontent: action.data,\n            // },\n\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id // data: id,\n\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadComment, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data // data: action.data,\n\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_MINE,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction loadAPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadAPostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_A_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_A_POST_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(action);\n          _context5.next = 4;\n          return call(fetchPost, action.data);\n\n        case 4:\n          result = _context5.sent;\n          _context5.next = 7;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data // data: generateDummyPost(10),\n\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context5.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            data: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            data: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: RETWEET_FAILURE,\n            data: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(loadUserAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            data: _context11.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context12.next = 12;\n          break;\n\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          _context12.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context12.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchLoadAPost() {\n  return _regeneratorRuntime.wrap(function watchLoadAPost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(LOAD_A_POST_REQUEST, loadAPost);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages), fork(watchRetweet), fork(watchLoadAPost), fork(watchLoadUser), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["addPost","addComment","removePost","loadAPost","loadPost","likePost","unlikePost","uploadImages","retweet","loadUser","loadUserPosts","loadHashtagPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadAPost","watchLoadUser","watchLoadUserPosts","watchLoadHashtagPosts","postSaga","put","delay","takeEvery","takeLatest","all","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","LIKE_POST_SUCCESS","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_A_POST_REQUEST","LOAD_A_POST_SUCCESS","LOAD_A_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","uploadPost","uploadComment","fetchPost","likePostAPI","unlikePostAPI","removePostAPI","uploadImagesAPI","retweetAPI","loadAPostAPI","loadUserPostsAPI","loadHashtagPostsAPI","action","data","result","type","id","response","console","error","log","loadUserAPI","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","lastId","LOAD_USER_REQUEST"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n\tLOAD_POST_REQUEST,\n\tLOAD_POST_FAILURE,\n\tLOAD_POST_SUCCESS,\n\tLIKE_POST_REQUEST,\n\tUNLIKE_POST_REQUEST,\n\tLIKE_POST_FAILURE,\n\tUNLIKE_POST_FAILURE,\n\tLIKE_POST_SUCCESS,\n\tUNLIKE_POST_SUCCESS,\n\tUPLOAD_IMAGES_REQUEST,\n\tUPLOAD_IMAGES_FAILURE,\n\tUPLOAD_IMAGES_SUCCESS,\n\tRETWEET_REQUEST,\n\tRETWEET_SUCCESS,\n\tRETWEET_FAILURE,\n\tLOAD_A_POST_REQUEST,\n\tLOAD_A_POST_SUCCESS,\n\tLOAD_A_POST_FAILURE,\n\tLOAD_USER_POSTS_REQUEST,\n\tLOAD_HASHTAG_POSTS_REQUEST,\n\tLOAD_USER_POSTS_FAILURE,\n\tLOAD_USER_POSTS_SUCCESS,\n\tLOAD_HASHTAG_POSTS_SUCCESS,\n\tLOAD_HASHTAG_POSTS_FAILURE,\n} from '../actions/index';\n// import shortid from 'shortid';\n// import { generateDummyPost } from '../reducer/post';\nimport {\n\tuploadPost,\n\tuploadComment,\n\tfetchPost,\n\tlikePostAPI,\n\tunlikePostAPI,\n\tremovePostAPI,\n\tuploadImagesAPI,\n\tretweetAPI,\n\tloadAPostAPI,\n\tloadUserPostsAPI,\n\tloadHashtagPostsAPI,\n} from '../API/index';\nfunction* addPost(action) {\n\t// console.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// yield delay(1000);\n\t\t// const id = shortid.generate();\n\t\tconst result = yield call(uploadPost, action.data);\n\t\t// result {content, PostId, UserId}\n\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: {\n\t\t\t// \tid,\n\t\t\t// \tcontent: action.data,\n\t\t\t// },\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t\t// data: id,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(uploadComment, action.data);\n\t\t// yield delay(1000);\n\t\t// result = {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tconst result = yield call(removePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadAPost(action) {\n\ttry {\n\t\tconst result = yield call(loadAPostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_A_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_A_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadPost(action) {\n\ttry {\n\t\tconsole.log(action);\n\t\tconst result = yield call(fetchPost, action.data);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* likePost(action) {\n\ttry {\n\t\tconst result = yield call(likePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* unlikePost(action) {\n\ttry {\n\t\tconst result = yield call(unlikePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UNLIKE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNLIKE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadImages(action) {\n\ttry {\n\t\tconst result = yield call(uploadImagesAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_IMAGES_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_IMAGES_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* retweet(action) {\n\ttry {\n\t\tconst result = yield call(retweetAPI, action.data);\n\t\tyield put({\n\t\t\ttype: RETWEET_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: RETWEET_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadUser(action) {\n\ttry {\n\t\tconst result = yield call(loadUserAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_USER_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LOAD_USER_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n}\n\nfunction* loadUserPosts(action) {\n\ttry {\n\t\tconst result = yield call(loadUserPostsAPI, action.data, action.lastId);\n\t\tyield put({\n\t\t\ttype: LOAD_USER_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_USER_POSTS_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadHashtagPosts(action) {\n\ttry {\n\t\tconst result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n\t\tyield put({\n\t\t\ttype: LOAD_HASHTAG_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_HASHTAG_POSTS_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\t// console.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\t// console.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLikePost() {\n\tyield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchUploadImages() {\n\tyield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchRetweet() {\n\tyield takeLatest(RETWEET_REQUEST, retweet);\n}\nfunction* watchLoadAPost() {\n\tyield takeLatest(LOAD_A_POST_REQUEST, loadAPost);\n}\n\nfunction* watchLoadUser() {\n\tyield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\nfunction* watchLoadUserPosts() {\n\tyield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\nfunction* watchLoadHashtagPosts() {\n\tyield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchAddComment),\n\t\tfork(watchRemovePost),\n\t\tfork(watchLoadPost),\n\t\tfork(watchLikePost),\n\t\tfork(watchUnlikePost),\n\t\tfork(watchUploadImages),\n\t\tfork(watchRetweet),\n\t\tfork(watchLoadAPost),\n\t\tfork(watchLoadUser),\n\t\tfork(watchLoadUserPosts),\n\t\tfork(watchLoadHashtagPosts),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}