{"ast":null,"code":"import produce from 'immer'; // import faker from 'faker';\n// import shortid from 'shortid';\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_MINE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, REMOVE_IMAGE, RETWEET_SUCCESS, RETWEET_REQUEST, RETWEET_FAILURE, LOAD_A_POST_REQUEST, LOAD_A_POST_SUCCESS, LOAD_A_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_FAILURE } from '../actions';\nexport const initialState = {\n  mainPosts: [// {\n    // \tid: shortid.generate(),\n    // \tUser: {\n    // \t\tid: 1,\n    // \t\tnickname: 'pius',\n    // \t},\n    // \tcontent: '#Hello#react made by #pius ',\n    // \tImages: [\n    // \t\t{\n    // \t\t\tid: shortid.generate(),\n    // \t\t\tsrc:\n    // \t\t\t\t'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRL13vWu8GOWHAFISKo9v5oBEU75C9udknN2w&usqp=CAU',\n    // \t\t},\n    // \t\t{\n    // \t\t\tid: shortid.generate(),\n    // \t\t\tsrc:\n    // \t\t\t\t'https://i.pinimg.com/736x/0b/2f/8a/0b2f8a51314ab1ebe0505aee843a33b1.jpg',\n    // \t\t},\n    // \t\t{\n    // \t\t\tid: shortid.generate(),\n    // \t\t\tsrc:\n    // \t\t\t\t'https://pbs.twimg.com/profile_images/1256251357763235842/zY8KO59p_400x400.jpg',\n    // \t\t},\n    // \t],\n    // \tComments: [\n    // \t\t{\n    // \t\t\tid: shortid.generate(),\n    // \t\t\tUser: {\n    // \t\t\t\tid: shortid.generate(),\n    // \t\t\t\tnickname: 'aksfbs',\n    // \t\t\t},\n    // \t\t\tcontent: '안녕하세요',\n    // \t\t},\n    // \t],\n    // Likers: []\n    // },\n  ],\n  imagePaths: [],\n  singlePost: {},\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagestLoading: false,\n  uploadImagestDone: false,\n  uploadImagestError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  loadAPostLoading: false,\n  loadAPostDone: false,\n  loadAPostError: null\n}; // export const generateDummyPost = num =>\n// \tArray(num)\n// \t\t.fill()\n// \t\t.map((item, idx) => ({\n// \t\t\tid: shortid.generate(),\n// \t\t\tUser: {\n// \t\t\t\tid: shortid.generate(),\n// \t\t\t\tnickname: faker.name.findName(),\n// \t\t\t},\n// \t\t\tcontent: faker.lorem.paragraph(),\n// \t\t\tImages: [],\n// \t\t\tComments: [\n// \t\t\t\t{\n// \t\t\t\t\tid: shortid.generate(),\n// \t\t\t\t\tUser: {\n// \t\t\t\t\t\tid: shortid.generate(),\n// \t\t\t\t\t\tnickname: faker.name.findName(),\n// \t\t\t\t\t},\n// \t\t\t\t\tcontent: faker.lorem.paragraph(),\n// \t\t\t\t},\n// \t\t\t],\n// \t\t}));\n// initialState.mainPosts = initialState.mainPosts.concat(\n// \tArray(20)\n// \t\t.fill()\n// \t\t.map((item, idx) => ({\n// \t\t\tid: shortid.generate(),\n// \t\t\tUser: {\n// \t\t\t\tid: shortid.generate(),\n// \t\t\t\tnickname: faker.name.findName(),\n// \t\t\t},\n// \t\t\tcontent: faker.lorem.paragraph(),\n// \t\t\tImages: [],\n// \t\t\tComments: [\n// \t\t\t\t{\n// \t\t\t\t\tid: shortid.generate(),\n// \t\t\t\t\tUser: {\n// \t\t\t\t\t\tid: shortid.generate(),\n// \t\t\t\t\t\tnickname: faker.name.findName(),\n// \t\t\t\t\t},\n// \t\t\t\t\tcontent: faker.lorem.paragraph(),\n// \t\t\t\t},\n// \t\t\t],\n// \t\t})),\n// );\n// const dummyPost = data => ({\n// \tid: data.id,\n// \tUser: {\n// \t\tid: 1,\n// \t\tnickname: 'pius',\n// \t},\n// \tcontent: data.content,\n// \tImage: [],\n// \tComments: [],\n// });\n// const dummyComment = data => ({\n// \tid: shortid.generate(),\n// \tUser: {\n// \t\tnickname: 'aksfbs',\n// \t},\n// \tcontent: data,\n// });\n\nexport const addPostRequest = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport const removePostRequest = data => {\n  return {\n    type: REMOVE_POST_REQUEST,\n    data: data\n  };\n};\nexport const addCommentRequest = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draftState => {\n    switch (action.type) {\n      // POST\n      case ADD_POST_REQUEST:\n        draftState.addPostLoading = true;\n        draftState.addPostDone = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        // draftState.mainPosts.unshift(dummyPost(action.data));\n        draftState.mainPosts.unshift(action.data);\n        draftState.addPostLoading = false;\n        draftState.addPostDone = true;\n        draftState.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draftState.addPostError = action.data;\n        break;\n      // Comment\n\n      case ADD_COMMENT_REQUEST:\n        draftState.addCommentLoading = true;\n        draftState.addCommentDone = false;\n        draftState.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          //action.data.content, postId, userId\n          // comment form에서 comment를 추가할때,\n          // store에 있는 mainPosts를 찾아서 추가해준다.\n          const idx = draftState.mainPosts.findIndex(item => item.id === action.data.PostId);\n          console.log('idx', idx);\n          console.log(action.data);\n          draftState.mainPosts[idx].Comments.unshift(action.data // dummyComment(action.data.content),\n          );\n          draftState.addCommentLoading = false;\n          draftState.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draftState.addCommentError = action.data;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draftState.removePostLoading = true;\n        draftState.removePostDone = false;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draftState.removePostLoading = false;\n        draftState.removePostDone = true;\n        draftState.mainPosts = draftState.mainPosts.filter(item => item.id !== action.data.PostId);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draftState.removePostLoading = false;\n        draftState.removePostError = action.data;\n        break;\n\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POST_REQUEST:\n        draftState.loadPostLoading = true;\n        draftState.loadPostDone = false;\n        break;\n\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POST_SUCCESS:\n        draftState.loadPostLoading = false;\n        draftState.loadPostDone = true;\n        console.log(action.data);\n        draftState.mainPosts = draftState.mainPosts.concat(action.data);\n        draftState.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POST_FAILURE:\n        draftState.loadPostError = action.data;\n        break;\n      // 좋아요 버튼\n\n      case LIKE_POST_REQUEST:\n        draftState.likePostLoading = true;\n        draftState.likePostDone = false;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const idx = draftState.mainPosts.findIndex(item => item.id === action.data.PostId);\n          draftState.mainPosts[idx].Likers.push({\n            id: action.data.UserId\n          });\n          draftState.likePostLoading = false;\n          draftState.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draftState.likePostError = action.data;\n        break;\n      // 좋아요 버튼 취소\n\n      case UNLIKE_POST_REQUEST:\n        draftState.unlikePostLoading = true;\n        draftState.unlikePostDone = false;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          // draftState.mainPosts.unshift(dummyPost(action.data));\n          const idx = draftState.mainPosts.findIndex(item => item.id === action.data.PostId);\n          const userIdx = draftState.mainPosts[idx].Likers.findIndex(user => user.id === action.data.UserId);\n          draftState.mainPosts[idx].Likers.splice(userIdx, 1);\n          draftState.unlikePostLoading = false;\n          draftState.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draftState.unlikePostError = action.data;\n        break;\n      // 이미지 업로드\n\n      case UPLOAD_IMAGES_REQUEST:\n        draftState.uploadImagesLoading = true;\n        draftState.uploadImagesDone = false;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draftState.imagePaths = action.data;\n        draftState.uploadImagesLoading = false;\n        draftState.uploadImagesDone = true;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draftState.uploadImagesLoading = false;\n        draftState.uploadImagesError = action.data;\n        break;\n\n      case REMOVE_IMAGE:\n        console.log(action.data);\n        draftState.imagePaths.splice(action.data, 1);\n        break;\n\n      case RETWEET_REQUEST:\n        draftState.retweetLoading = true;\n        draftState.retweetDone = false;\n        break;\n\n      case RETWEET_SUCCESS:\n        // draftState.mainPosts.unshift(dummyPost(action.data));\n        draftState.mainPosts.unshift(action.data);\n        draftState.retweetLoading = false;\n        draftState.retweetDone = true;\n        break;\n\n      case RETWEET_FAILURE:\n        console.log(action.data);\n        draftState.retweetError = action.data;\n        break;\n\n      case LOAD_A_POST_REQUEST:\n        draftState.loadAPostLoading = true;\n        draftState.loadAPostDone = false;\n        break;\n\n      case LOAD_A_POST_SUCCESS:\n        console.log('success', action.data);\n        draftState.loadAPostLoading = false;\n        draftState.loadAPostDone = true;\n        draftState.singlePost = action.data;\n        break;\n\n      case LOAD_A_POST_FAILURE:\n        console.log('failure', action.data);\n        draftState.loadAPostError = action.data;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}