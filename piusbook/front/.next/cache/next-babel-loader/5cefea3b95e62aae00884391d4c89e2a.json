{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POST_REQUEST } from '../actions';\nimport axios from 'axios';\n\nvar Home = function Home() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostLoading = _useSelector2.loadPostLoading;\n\n  var dispatch = useDispatch();\n  /*\n  아래의 부분은 서버 사이드 렌더링을 통해서 구현하는 것이 좋다. \n  useEffect(() => {\n  \t\tdispatch({\n  \t\t\ttype: LOAD_POST_REQUEST,\n  \t\t\t// data: {},\n  \t\t});\n  }, [hasMorePosts]);\n  useEffect(() => {\n  \tdispatch({\n  \t\ttype: LOAD_MY_INFO_REQUEST,\n  \t});\n  }, []);\n  */\n\n  useEffect(function () {\n    function onScroll() {\n      // console.log(\n      // \twindow.scrollY,\n      // \tdocument.documentElement.clientHeight,\n      // \tdocument.documentElement.scrollHeight,\n      // );\n      // console.log(\n      // \twindow.scrollY + document.documentElement.clientHeight + 300 >\n      // \t\tdocument.documentElement.scrollHeight,\n      // );\n      // console.log(hasMorePost);\n      // console.log(\n      // \twindow.scrollY + document.documentElement.clientHeight + 300 >\n      // \t\tdocument.documentElement.scrollHeight && hasMorePost,\n      // );\n      if (window.scrollY + document.documentElement.clientHeight + 300 > document.documentElement.scrollHeight && hasMorePosts && !loadPostLoading) {\n        // 마지막 mainPosts의 id\n        var lastId = mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id;\n        console.log('lastId', lastId);\n        dispatch({\n          type: LOAD_POST_REQUEST,\n          data: lastId\n        });\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), mainPosts.map(function (post, index) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    });\n  }));\n}; // AppLayout 안에 있는 것이 children이 되는 것.\n\n\n_s(Home, \"O78mgZHAv3RtRyTiKZV/hHV3nhw=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Home;\nexport var __N_SSG = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POST_REQUEST","axios","Home","state","user","me","post","mainPosts","hasMorePosts","loadPostLoading","dispatch","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","console","log","type","data","addEventListener","removeEventListener","map","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAwD,YAAxD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,qBACHP,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CADR;AAAA,MACVC,EADU,gBACVA,EADU;;AAAA,sBAEmCV,WAAW,CAC/D,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAD0D,CAF9C;AAAA,MAEVC,SAFU,iBAEVA,SAFU;AAAA,MAECC,YAFD,iBAECA,YAFD;AAAA,MAEeC,eAFf,iBAEeA,eAFf;;AAKlB,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA;;;;;;;;;;;;;;;AAcAF,EAAAA,SAAS,CAAC,YAAM;AACf,aAASiB,QAAT,GAAoB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACCC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyD,GAAzD,GACCF,QAAQ,CAACC,eAAT,CAAyBE,YAD1B,IAEAT,YAFA,IAGA,CAACC,eAJF,EAKE;AACD;AACA,YAAMS,MAAM,GACXX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAmB,CAApB,CAAT,IAAmCZ,SAAS,CAACA,SAAS,CAACY,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EADpE;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB;AACAR,QAAAA,QAAQ,CAAC;AACRa,UAAAA,IAAI,EAAEvB,iBADE;AAERwB,UAAAA,IAAI,EAAEN;AAFE,SAAD,CAAR;AAIA;AACD;;AACDN,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,YAAM;AACZC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACA,KAFD;AAGA,GApCQ,EAoCN,CAACH,YAAD,EAAeC,eAAf,EAAgCF,SAAhC,CApCM,CAAT;AAqCA,SACC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEF,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,EAEEE,SAAS,CAACoB,GAAV,CAAc,UAACrB,IAAD,EAAOsB,KAAP;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEtB,IAAI,CAACc,EAApB;AAAwB,MAAA,IAAI,EAAEd,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc;AAAA,GAAd,CAFF,CADD;AAQA,CAlED,C,CAmEA;;;GAnEMJ,I;UACUP,W,EACsCA,W,EAGpCC,W;;;KALZM,I;;AAoEN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { END } from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POST_REQUEST, LOAD_MY_INFO_REQUEST } from '../actions';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\nconst Home = () => {\n\tconst { me } = useSelector(state => state.user);\n\tconst { mainPosts, hasMorePosts, loadPostLoading } = useSelector(\n\t\tstate => state.post,\n\t);\n\tconst dispatch = useDispatch();\n\n\t/*\n\t아래의 부분은 서버 사이드 렌더링을 통해서 구현하는 것이 좋다. \n\tuseEffect(() => {\n\t\t\tdispatch({\n\t\t\t\ttype: LOAD_POST_REQUEST,\n\t\t\t\t// data: {},\n\t\t\t});\n\t}, [hasMorePosts]);\n\tuseEffect(() => {\n\t\tdispatch({\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\n\t\t});\n\t}, []);\n\t*/\n\tuseEffect(() => {\n\t\tfunction onScroll() {\n\t\t\t// console.log(\n\t\t\t// \twindow.scrollY,\n\t\t\t// \tdocument.documentElement.clientHeight,\n\t\t\t// \tdocument.documentElement.scrollHeight,\n\t\t\t// );\n\t\t\t// console.log(\n\t\t\t// \twindow.scrollY + document.documentElement.clientHeight + 300 >\n\t\t\t// \t\tdocument.documentElement.scrollHeight,\n\t\t\t// );\n\t\t\t// console.log(hasMorePost);\n\t\t\t// console.log(\n\t\t\t// \twindow.scrollY + document.documentElement.clientHeight + 300 >\n\t\t\t// \t\tdocument.documentElement.scrollHeight && hasMorePost,\n\t\t\t// );\n\t\t\tif (\n\t\t\t\twindow.scrollY + document.documentElement.clientHeight + 300 >\n\t\t\t\t\tdocument.documentElement.scrollHeight &&\n\t\t\t\thasMorePosts &&\n\t\t\t\t!loadPostLoading\n\t\t\t) {\n\t\t\t\t// 마지막 mainPosts의 id\n\t\t\t\tconst lastId =\n\t\t\t\t\tmainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id;\n\t\t\t\tconsole.log('lastId', lastId);\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: LOAD_POST_REQUEST,\n\t\t\t\t\tdata: lastId,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener('scroll', onScroll);\n\t\treturn () => {\n\t\t\twindow.removeEventListener('scroll', onScroll);\n\t\t};\n\t}, [hasMorePosts, loadPostLoading, mainPosts]);\n\treturn (\n\t\t<AppLayout>\n\t\t\t{me && <PostForm></PostForm>}\n\t\t\t{mainPosts.map((post, index) => (\n\t\t\t\t<PostCard key={post.id} post={post}></PostCard>\n\t\t\t))}\n\t\t</AppLayout>\n\t);\n};\n// AppLayout 안에 있는 것이 children이 되는 것.\nexport default Home;\n\nexport const getStaticProps = wrapper.getStaticProps(async ({ store, req }) => {\n\tstore.dispatch({\n\t\ttype: LOAD_POST_REQUEST,\n\t});\n\tstore.dispatch({\n\t\ttype: LOAD_MY_INFO_REQUEST,\n\t});\n\tstore.dispatch(END);\n\tawait store.sagaTask.toPromise();\n});\n"]},"metadata":{},"sourceType":"module"}