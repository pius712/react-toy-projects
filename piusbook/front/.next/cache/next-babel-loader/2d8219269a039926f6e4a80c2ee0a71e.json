{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POST_REQUEST } from '../actions';\n\nvar Home = function Home() {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostLoading = _useSelector2.loadPostLoading;\n\n  var dispatch = useDispatch();\n  /*\n  아래의 부분은 서버 사이드 렌더링을 통해서 구현하는 것이 좋다. \n  useEffect(() => {\n  \t\tdispatch({\n  \t\t\ttype: LOAD_POST_REQUEST,\n  \t\t\t// data: {},\n  \t\t});\n  }, [hasMorePosts]);\n  useEffect(() => {\n  \tdispatch({\n  \t\ttype: LOAD_MY_INFO_REQUEST,\n  \t});\n  }, []);\n  */\n\n  useEffect(function () {\n    function onScroll() {\n      // console.log(\n      // \twindow.scrollY,\n      // \tdocument.documentElement.clientHeight,\n      // \tdocument.documentElement.scrollHeight,\n      // );\n      // console.log(\n      // \twindow.scrollY + document.documentElement.clientHeight + 300 >\n      // \t\tdocument.documentElement.scrollHeight,\n      // );\n      // console.log(hasMorePost);\n      // console.log(\n      // \twindow.scrollY + document.documentElement.clientHeight + 300 >\n      // \t\tdocument.documentElement.scrollHeight && hasMorePost,\n      // );\n      if (window.scrollY + document.documentElement.clientHeight + 300 > document.documentElement.scrollHeight && hasMorePosts && !loadPostLoading) {\n        // 마지막 mainPosts의 id\n        var lastId = mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id;\n        console.log('lastId', lastId);\n        dispatch({\n          type: LOAD_POST_REQUEST,\n          data: lastId\n        });\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostLoading, mainPosts]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), mainPosts.map(function (post, index) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n}; // AppLayout 안에 있는 것이 children이 되는 것.\n\n\nexport var __N_SSP = true;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}