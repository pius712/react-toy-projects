{"ast":null,"code":"var _jsxFileName = \"/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport propTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Card, Popover, Button, List, Comment, Avatar } from 'antd';\nimport { RetweetOutlined, HeartOutlined, HeartFilled, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST } from '../actions';\nimport Link from 'next/link';\nconst PostCardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__PostCardWrapper\",\n  componentId: \"v37uo4-0\"\n})([\"margin:10px 5px;\"]);\nconst Content = styled.div.withConfig({\n  displayName: \"PostCard__Content\",\n  componentId: \"v37uo4-1\"\n})([\"\"]);\nconst Image = styled.img.withConfig({\n  displayName: \"PostCard__Image\",\n  componentId: \"v37uo4-2\"\n})([\"\"]);\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const me = useSelector(state => state.user.me);\n  const id = me && me.id;\n  const liked = post.Likers.find(liker => liker.id === id); // const [liked, setLiked] = useState(false);\n\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpend\n  } = useState(false);\n  const onLike = useCallback(() => {\n    // setLiked(true);\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    } else {\n      dispatch({\n        type: RETWEET_REQUEST,\n        data: {\n          PostId: post.id\n        }\n      });\n    }\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    // setLiked(false);\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpend(prev => !prev);\n  }, [setCommentFormOpend]);\n  const onDeletePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: {\n        PostId: post.id\n      }\n    });\n  }, [dispatch, post]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 3\n    }\n  }, __jsx(Card, {\n    cover: post.Images && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 27\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 6\n      }\n    }), liked ? __jsx(HeartFilled, {\n      key: \"heart-filled\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 8\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        onClick: onDeletePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 10\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }))],\n    extra: me && me.id !== post.User.id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(React.Fragment, null, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 10\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: `${post.User.nickname}님이 리트윗하였습니다.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), __jsx(Card, {\n    cover: post.Retweet.Images && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 10\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: post.Retweet.User.nickname[0],\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 10\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 8\n    }\n  }))) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 8\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 10\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 8\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 6\n    }\n  })), commentFormOpend && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 6\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글이 있습니다.`,\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 8\n      }\n    }, __jsx(Comment, {\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 18\n        }\n      }, item.User.nickname),\n      author: item.User.nickname,\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 6\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: propTypes.object\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}