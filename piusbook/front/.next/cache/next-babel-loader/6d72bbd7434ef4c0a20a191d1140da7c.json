{"ast":null,"code":"import { put, delay, takeEvery, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE, LIKE_POST_SUCCESS, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_A_POST_REQUEST, LOAD_A_POST_SUCCESS, LOAD_A_POST_FAILURE } from '../actions/index'; // import shortid from 'shortid';\n// import { generateDummyPost } from '../reducer/post';\n\nimport { uploadPost, uploadComment, fetchPost, likePostAPI, unlikePostAPI, removePostAPI, uploadImagesAPI, retweetAPI, loadAPostAPI } from '../API/index';\n\nfunction* addPost(action) {\n  // console.log('saga add post');\n  try {\n    // const result = yield call();\n    // yield delay(1000);\n    // const id = shortid.generate();\n    const result = yield call(uploadPost, action.data); // result {content, PostId, UserId}\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data // data: {\n      // \tid,\n      // \tcontent: action.data,\n      // },\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id // data: id,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(uploadComment, action.data); // yield delay(1000);\n    // result = {content, PostId, UserId}\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: action.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_MINE,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* loadAPost(action) {\n  try {\n    const result = yield call(loadAPostAPI, action.data);\n    yield put({\n      type: LOAD_A_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_A_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* loadPost(action) {\n  try {\n    console.log(action);\n    const result = yield call(fetchPost, action.data); // yield delay(1000);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data // data: generateDummyPost(10),\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // console.log('saga post');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  // console.log('watching...');\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadAPost() {\n  yield takeLatest(LOAD_A_POST_REQUEST, loadAPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages), fork(watchRetweet), fork(watchLoadAPost)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["put","delay","takeEvery","takeLatest","all","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","LIKE_POST_SUCCESS","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_A_POST_REQUEST","LOAD_A_POST_SUCCESS","LOAD_A_POST_FAILURE","uploadPost","uploadComment","fetchPost","likePostAPI","unlikePostAPI","removePostAPI","uploadImagesAPI","retweetAPI","loadAPostAPI","addPost","action","result","data","type","id","err","response","addComment","console","error","removePost","loadAPost","loadPost","log","likePost","unlikePost","uploadImages","retweet","watchAddPost","watchAddComment","watchRemovePost","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadAPost","postSaga"],"mappings":"AAAA,SACCA,GADD,EAECC,KAFD,EAGCC,SAHD,EAICC,UAJD,EAKCC,GALD,EAMCC,IAND,EAOCC,IAPD,QAQO,oBARP;AASA,SACCC,gBADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,mBAJD,EAKCC,mBALD,EAMCC,mBAND,EAOCC,cAPD,EAQCC,mBARD,EASCC,mBATD,EAUCC,mBAVD,EAWCC,mBAXD,EAYCC,iBAZD,EAaCC,iBAbD,EAcCC,iBAdD,EAeCC,iBAfD,EAgBCC,mBAhBD,EAiBCC,iBAjBD,EAkBCC,mBAlBD,EAmBCC,iBAnBD,EAoBCC,mBApBD,EAqBCC,qBArBD,EAsBCC,qBAtBD,EAuBCC,qBAvBD,EAwBCC,eAxBD,EAyBCC,eAzBD,EA0BCC,eA1BD,EA2BCC,mBA3BD,EA4BCC,mBA5BD,EA6BCC,mBA7BD,QA8BO,kBA9BP,C,CA+BA;AACA;;AACA,SACCC,UADD,EAECC,aAFD,EAGCC,SAHD,EAICC,WAJD,EAKCC,aALD,EAMCC,aAND,EAOCC,eAPD,EAQCC,UARD,EASCC,YATD,QAUO,cAVP;;AAWA,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACzB;AACA,MAAI;AACH;AACA;AACA;AACA,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAAC8B,UAAD,EAAaU,MAAM,CAACE,IAApB,CAAzB,CAJG,CAKH;;AAEA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEzC,gBADG;AAETwC,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFJ,CAGT;AACA;AACA;AACA;;AANS,KAAD,CAAT;AAQA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEpC,cADG;AAETmC,MAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,CAAYE,EAFT,CAGT;;AAHS,KAAD,CAAT;AAKA,GApBD,CAoBE,OAAOC,GAAP,EAAY;AACb,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAExC,gBADG;AAETuC,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUK,UAAV,CAAqBP,MAArB,EAA6B;AAC5B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAAC+B,aAAD,EAAgBS,MAAM,CAACE,IAAvB,CAAzB,CADG,CAEH;AACA;;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEtC,mBADG;AAETqC,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GATD,CASE,OAAOG,GAAP,EAAY;AACbG,IAAAA,OAAO,CAACC,KAAR,CAAcJ,GAAd;AACA,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAErC,mBADG;AAEToC,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AAED,UAAUQ,UAAV,CAAqBV,MAArB,EAA6B;AAC5B,MAAI;AACH;AACA,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACmC,aAAD,EAAgBK,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAElC,mBADG;AAETiC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEhC,mBADG;AAET+B,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,KAAD,CAAT;AAIA,GAXD,CAWE,OAAOG,GAAP,EAAY;AACb,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEjC,mBADG;AAETgC,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUS,SAAV,CAAoBX,MAApB,EAA4B;AAC3B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACsC,YAAD,EAAeE,MAAM,CAACE,IAAtB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEf,mBADG;AAETc,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,GAAP,EAAY;AACb,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEd,mBADG;AAETa,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUU,QAAV,CAAmBZ,MAAnB,EAA2B;AAC1B,MAAI;AACHQ,IAAAA,OAAO,CAACK,GAAR,CAAYb,MAAZ;AACA,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACgC,SAAD,EAAYQ,MAAM,CAACE,IAAnB,CAAzB,CAFG,CAGH;;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAE7B,iBADG;AAET4B,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GATD,CASE,OAAOG,GAAP,EAAY;AACbG,IAAAA,OAAO,CAACC,KAAR,CAAcJ,GAAd;AACA,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAE9B,iBADG;AAET6B,MAAAA,IAAI,EAAEG;AAFG,KAAD,CAAT;AAIA;AACD;;AACD,UAAUS,QAAV,CAAmBd,MAAnB,EAA2B;AAC1B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACiC,WAAD,EAAcO,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAExB,iBADG;AAETuB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,GAAP,EAAY;AACbG,IAAAA,OAAO,CAACC,KAAR,CAAcJ,GAAd;AACA,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAE1B,iBADG;AAETyB,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUa,UAAV,CAAqBf,MAArB,EAA6B;AAC5B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACkC,aAAD,EAAgBM,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEvB,mBADG;AAETsB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,GAAP,EAAY;AACb,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEzB,mBADG;AAETwB,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUc,YAAV,CAAuBhB,MAAvB,EAA+B;AAC9B,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACoC,eAAD,EAAkBI,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEpB,qBADG;AAETmB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,GAAP,EAAY;AACbG,IAAAA,OAAO,CAACC,KAAR,CAAcJ,GAAd;AACA,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAErB,qBADG;AAEToB,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUe,OAAV,CAAkBjB,MAAlB,EAA0B;AACzB,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMzC,IAAI,CAACqC,UAAD,EAAaG,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAElB,eADG;AAETiB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,GAAP,EAAY;AACb,UAAMnD,GAAG,CAAC;AACTiD,MAAAA,IAAI,EAAEjB,eADG;AAETgB,MAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaJ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,UAAUgB,YAAV,GAAyB;AACxB;AACA,QAAM7D,UAAU,CAACI,gBAAD,EAAmBsC,OAAnB,CAAhB;AACA;;AACD,UAAUoB,eAAV,GAA4B;AAC3B,QAAM9D,UAAU,CAACO,mBAAD,EAAsB2C,UAAtB,CAAhB;AACA;;AAED,UAAUa,eAAV,GAA4B;AAC3B;AACA,QAAM/D,UAAU,CAACW,mBAAD,EAAsB0C,UAAtB,CAAhB;AACA;;AAED,UAAUW,aAAV,GAA0B;AACzB,QAAMhE,UAAU,CAACe,iBAAD,EAAoBwC,QAApB,CAAhB;AACA;;AACD,UAAUU,aAAV,GAA0B;AACzB,QAAMjE,UAAU,CAACkB,iBAAD,EAAoBuC,QAApB,CAAhB;AACA;;AACD,UAAUS,eAAV,GAA4B;AAC3B,QAAMlE,UAAU,CAACmB,mBAAD,EAAsBuC,UAAtB,CAAhB;AACA;;AACD,UAAUS,iBAAV,GAA8B;AAC7B,QAAMnE,UAAU,CAACwB,qBAAD,EAAwBmC,YAAxB,CAAhB;AACA;;AACD,UAAUS,YAAV,GAAyB;AACxB,QAAMpE,UAAU,CAAC2B,eAAD,EAAkBiC,OAAlB,CAAhB;AACA;;AACD,UAAUS,cAAV,GAA2B;AAC1B,QAAMrE,UAAU,CAAC8B,mBAAD,EAAsBwB,SAAtB,CAAhB;AACA;;AACD,eAAe,UAAUgB,QAAV,GAAqB;AACnC,QAAMrE,GAAG,CAAC,CACTC,IAAI,CAAC2D,YAAD,CADK,EAET3D,IAAI,CAAC4D,eAAD,CAFK,EAGT5D,IAAI,CAAC6D,eAAD,CAHK,EAIT7D,IAAI,CAAC8D,aAAD,CAJK,EAKT9D,IAAI,CAAC+D,aAAD,CALK,EAMT/D,IAAI,CAACgE,eAAD,CANK,EAOThE,IAAI,CAACiE,iBAAD,CAPK,EAQTjE,IAAI,CAACkE,YAAD,CARK,EASTlE,IAAI,CAACmE,cAAD,CATK,CAAD,CAAT;AAWA","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n\tLOAD_POST_REQUEST,\n\tLOAD_POST_FAILURE,\n\tLOAD_POST_SUCCESS,\n\tLIKE_POST_REQUEST,\n\tUNLIKE_POST_REQUEST,\n\tLIKE_POST_FAILURE,\n\tUNLIKE_POST_FAILURE,\n\tLIKE_POST_SUCCESS,\n\tUNLIKE_POST_SUCCESS,\n\tUPLOAD_IMAGES_REQUEST,\n\tUPLOAD_IMAGES_FAILURE,\n\tUPLOAD_IMAGES_SUCCESS,\n\tRETWEET_REQUEST,\n\tRETWEET_SUCCESS,\n\tRETWEET_FAILURE,\n\tLOAD_A_POST_REQUEST,\n\tLOAD_A_POST_SUCCESS,\n\tLOAD_A_POST_FAILURE,\n} from '../actions/index';\n// import shortid from 'shortid';\n// import { generateDummyPost } from '../reducer/post';\nimport {\n\tuploadPost,\n\tuploadComment,\n\tfetchPost,\n\tlikePostAPI,\n\tunlikePostAPI,\n\tremovePostAPI,\n\tuploadImagesAPI,\n\tretweetAPI,\n\tloadAPostAPI,\n} from '../API/index';\nfunction* addPost(action) {\n\t// console.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// yield delay(1000);\n\t\t// const id = shortid.generate();\n\t\tconst result = yield call(uploadPost, action.data);\n\t\t// result {content, PostId, UserId}\n\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: {\n\t\t\t// \tid,\n\t\t\t// \tcontent: action.data,\n\t\t\t// },\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t\t// data: id,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(uploadComment, action.data);\n\t\t// yield delay(1000);\n\t\t// result = {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tconst result = yield call(removePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadAPost(action) {\n\ttry {\n\t\tconst result = yield call(loadAPostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_A_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_A_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* loadPost(action) {\n\ttry {\n\t\tconsole.log(action);\n\t\tconst result = yield call(fetchPost, action.data);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* likePost(action) {\n\ttry {\n\t\tconst result = yield call(likePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* unlikePost(action) {\n\ttry {\n\t\tconst result = yield call(unlikePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UNLIKE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNLIKE_POST_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* uploadImages(action) {\n\ttry {\n\t\tconst result = yield call(uploadImagesAPI, action.data);\n\t\tyield put({\n\t\t\ttype: UPLOAD_IMAGES_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: UPLOAD_IMAGES_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* retweet(action) {\n\ttry {\n\t\tconst result = yield call(retweetAPI, action.data);\n\t\tyield put({\n\t\t\ttype: RETWEET_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: RETWEET_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\t// console.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\t// console.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLikePost() {\n\tyield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchUploadImages() {\n\tyield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchRetweet() {\n\tyield takeLatest(RETWEET_REQUEST, retweet);\n}\nfunction* watchLoadAPost() {\n\tyield takeLatest(LOAD_A_POST_REQUEST, loadAPost);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchAddComment),\n\t\tfork(watchRemovePost),\n\t\tfork(watchLoadPost),\n\t\tfork(watchLikePost),\n\t\tfork(watchUnlikePost),\n\t\tfork(watchUploadImages),\n\t\tfork(watchRetweet),\n\t\tfork(watchLoadAPost),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}