{"ast":null,"code":"var _jsxFileName = \"/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/pages/user/[id].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport wrapper from '../../store/configureStore';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar } from 'antd';\nimport { LOAD_A_POST_REQUEST, LOAD_MY_INFO_REQUEST, LOAD_USER_POSTS_REQUEST, LOAD_USER_REQUEST } from '../../actions';\nimport PostCard from '../../components/PostCard';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../../components/AppLayout';\nimport { useRouter } from 'next/dist/client/router';\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostLoading\n  } = useSelector(state => state.post);\n  const router = useRouter();\n  const id = router.query.id;\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight + 300 > document.documentElement.scrollHeight && hasMorePosts && !loadPostLoading) {\n        // 마지막 mainPosts의 id\n        const lastId = mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id;\n        console.log('lastId', lastId);\n        dispatch({\n          type: LOAD_USER_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n          data: id\n        });\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/user/${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  })), userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 8\n      }\n    }), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 8\n      }\n    }), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 8\n      }\n    }), userInfo.Followers)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default User;\nexport const getServerSideProps = wrapper.getServerSideProps(async ({\n  store,\n  req,\n  params\n}) => {\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: params.id,\n    lastId: mainPosts[length - 1] && mainPosts[length - 1].id\n  });\n  store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: params.id\n  });\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/pages/user/[id].js"],"names":["React","useEffect","wrapper","Head","useSelector","useDispatch","Card","Avatar","LOAD_A_POST_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","END","axios","AppLayout","useRouter","User","dispatch","userInfo","state","user","mainPosts","hasMorePosts","loadPostLoading","post","router","id","query","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","console","log","type","data","addEventListener","removeEventListener","nickname","Posts","Followings","Followers","map","c","getServerSideProps","store","req","params","cookie","headers","defaults","Cookie","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport wrapper from '../../store/configureStore';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar } from 'antd';\nimport {\n\tLOAD_A_POST_REQUEST,\n\tLOAD_MY_INFO_REQUEST,\n\tLOAD_USER_POSTS_REQUEST,\n\tLOAD_USER_REQUEST,\n} from '../../actions';\nimport PostCard from '../../components/PostCard';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../../components/AppLayout';\nimport { useRouter } from 'next/dist/client/router';\nconst User = () => {\n\tconst dispatch = useDispatch();\n\tconst { userInfo } = useSelector(state => state.user);\n\tconst { mainPosts, hasMorePosts, loadPostLoading } = useSelector(\n\t\tstate => state.post,\n\t);\n\tconst router = useRouter();\n\tconst id = router.query.id;\n\n\tuseEffect(() => {\n\t\tfunction onScroll() {\n\t\t\tif (\n\t\t\t\twindow.scrollY + document.documentElement.clientHeight + 300 >\n\t\t\t\t\tdocument.documentElement.scrollHeight &&\n\t\t\t\thasMorePosts &&\n\t\t\t\t!loadPostLoading\n\t\t\t) {\n\t\t\t\t// 마지막 mainPosts의 id\n\t\t\t\tconst lastId =\n\t\t\t\t\tmainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id;\n\t\t\t\tconsole.log('lastId', lastId);\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: LOAD_USER_POSTS_REQUEST,\n\t\t\t\t\tlastId:\n\t\t\t\t\t\tmainPosts[mainPosts.length - 1] &&\n\t\t\t\t\t\tmainPosts[mainPosts.length - 1].id,\n\t\t\t\t\tdata: id,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener('scroll', onScroll);\n\t\treturn () => {\n\t\t\twindow.removeEventListener('scroll', onScroll);\n\t\t};\n\t}, [hasMorePosts, loadPostLoading, mainPosts]);\n\treturn (\n\t\t<AppLayout>\n\t\t\t<Head>\n\t\t\t\t<title>\n\t\t\t\t\t{userInfo.nickname}\n\t\t\t\t\t님의 글\n\t\t\t\t</title>\n\t\t\t\t<meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\n\t\t\t\t<meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\n\t\t\t\t<meta\n\t\t\t\t\tproperty=\"og:description\"\n\t\t\t\t\tcontent={`${userInfo.nickname}님의 게시글`}\n\t\t\t\t/>\n\t\t\t\t<meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\n\t\t\t\t<meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\n\t\t\t</Head>\n\t\t\t{userInfo ? (\n\t\t\t\t<Card\n\t\t\t\t\tactions={[\n\t\t\t\t\t\t<div key=\"twit\">\n\t\t\t\t\t\t\t짹짹\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{userInfo.Posts}\n\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t<div key=\"following\">\n\t\t\t\t\t\t\t팔로잉\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{userInfo.Followings}\n\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t<div key=\"follower\">\n\t\t\t\t\t\t\t팔로워\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{userInfo.Followers}\n\t\t\t\t\t\t</div>,\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<Card.Meta\n\t\t\t\t\t\tavatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n\t\t\t\t\t\ttitle={userInfo.nickname}\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t) : null}\n\t\t\t{mainPosts.map(c => (\n\t\t\t\t<PostCard key={c.id} post={c} />\n\t\t\t))}\n\t\t</AppLayout>\n\t);\n};\n\nexport default User;\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n\tasync ({ store, req, params }) => {\n\t\tconst cookie = req ? req.headers.cookie : '';\n\t\taxios.defaults.headers.Cookie = '';\n\t\tif (req && cookie) {\n\t\t\taxios.defaults.headers.Cookie = cookie;\n\t\t}\n\t\tstore.dispatch({\n\t\t\ttype: LOAD_USER_POSTS_REQUEST,\n\t\t\tdata: params.id,\n\t\t\tlastId: mainPosts[length - 1] && mainPosts[length - 1].id,\n\t\t});\n\t\tstore.dispatch({\n\t\t\ttype: LOAD_USER_REQUEST,\n\t\t\tdata: params.id,\n\t\t});\n\t\tstore.dispatch({\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\n\t\t});\n\t\tstore.dispatch(END);\n\t\tawait store.sagaTask.toPromise();\n\t},\n);\n"]},"metadata":{},"sourceType":"module"}