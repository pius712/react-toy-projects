{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { call, put, delay, takeLatest, all, fork } from 'redux-saga/effects';\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","call","put","delay","takeLatest","all","fork","action","type","data","error","response"],"mappings":";;oDAEUA,O;qDAgBAC,Y;qDAIeC,Q;;AAtBzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;;AAEA,SAAUR,OAAV,CAAkBS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMJ,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTM,YAAAA,IAAI,EAAE,kBADG;AAETC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFJ,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMP,GAAG,CAAC;AACTM,YAAAA,IAAI,EAAE,kBADG;AAETE,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeF;AAFb,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,UAAU,CAAC,kBAAD,EAAqBN,OAArB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMK,GAAG,CAAC,CAACC,IAAI,CAACP,YAAD,CAAL,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, delay, takeLatest, all, fork } from 'redux-saga/effects';\n\nfunction* addPost(action) {\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: 'ADD_POST_SUCCESS',\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: 'ADD_POST_FAILURE',\n\t\t\terror: error.response.data,\n\t\t});\n\t}\n}\n\nfunction* watchAddPost() {\n\tyield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n\tyield all([fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}