{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { put, delay, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE } from '../actions/index';\nimport shortid from 'shortid';\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('saga add post');\n          _context.prev = 1;\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortid.generate();\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.message\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_MINE\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.message\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('saga post');\n          _context4.next = 3;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["addPost","addComment","removePost","watchAddPost","watchAddComment","watchRemovePost","postSaga","put","delay","takeEvery","takeLatest","all","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","shortid","action","console","log","id","generate","type","data","content","error","response","message"],"mappings":";;oDAuBUA,O;qDAyBAC,U;qDAgBAC,U;qDAiBAC,Y;qDAIAC,e;qDAIAC,e;qDAGeC,Q;;AA5FzB,SACCC,GADD,EAECC,KAFD,EAGCC,SAHD,EAICC,UAJD,EAKCC,GALD,EAMCC,IAND,QAOO,oBAPP;AAQA,SACCC,gBADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,mBAJD,EAKCC,mBALD,EAMCC,mBAND,EAOCC,cAPD,EAQCC,mBARD,EASCC,mBATD,EAUCC,mBAVD,EAWCC,mBAXD,QAYO,kBAZP;AAaA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAAUxB,OAAV,CAAkByB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AADD;AAAA;AAKE,iBAAMnB,KAAK,CAAC,IAAD,CAAX;;AALF;AAMQoB,UAAAA,EANR,GAMaJ,OAAO,CAACK,QAAR,EANb;AAAA;AAOE,iBAAMtB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEhB,gBADG;AAETiB,YAAAA,IAAI,EAAE;AACLH,cAAAA,EAAE,EAAFA,EADK;AAELI,cAAAA,OAAO,EAAEP,MAAM,CAACM;AAFX;AAFG,WAAD,CAAT;;AAPF;AAAA;AAcE,iBAAMxB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEX,cADG;AAETY,YAAAA,IAAI,EAAEH;AAFG,WAAD,CAAT;;AAdF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBE,iBAAMrB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEf,gBADG;AAETkB,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeC;AAFb,WAAD,CAAT;;AAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUlC,UAAV,CAAqBwB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMjB,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEb,mBADG;AAETc,YAAAA,IAAI,EAAEN,MAAM,CAACM;AAFJ,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMxB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEZ,mBADG;AAETe,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeC;AAFb,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUjC,UAAV,CAAqBuB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMjB,KAAK,CAAC,IAAD,CAAX;;AAFF;AAAA;AAGE,iBAAMD,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAET,mBADG;AAETU,YAAAA,IAAI,EAAEN,MAAM,CAACM;AAFJ,WAAD,CAAT;;AAHF;AAAA;AAOE,iBAAMxB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAEP;AADG,WAAD,CAAT;;AAPF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWE,iBAAMhB,GAAG,CAAC;AACTuB,YAAAA,IAAI,EAAER,mBADG;AAETS,YAAAA,IAAI,EAAE,aAAMG,QAAN,CAAeC;AAFZ,WAAD,CAAT;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUhC,YAAV;AAAA;AAAA;AAAA;AAAA;AACCuB,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADD;AAEC,iBAAMjB,UAAU,CAACG,gBAAD,EAAmBb,OAAnB,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUI,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACM,mBAAD,EAAsBf,UAAtB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUI,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,UAAU,CAACU,mBAAD,EAAsBlB,UAAtB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMK,GAAG,CAAC,CAACC,IAAI,CAACT,YAAD,CAAL,EAAqBS,IAAI,CAACR,eAAD,CAAzB,EAA4CQ,IAAI,CAACP,eAAD,CAAhD,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n} from '../actions/index';\nimport shortid from 'shortid';\n\nfunction* addPost(action) {\n\tconsole.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// console.log('sga add post');\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: error.response.message,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\tconsole.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n\tyield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}