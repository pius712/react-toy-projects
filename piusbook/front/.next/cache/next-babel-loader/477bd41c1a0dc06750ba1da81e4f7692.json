{"ast":null,"code":"import { put, delay, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { registerUser, loginUser } from '../API/index';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../actions';\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginUser, action.data); // yield delay(1000);\n\n    console.log(result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.log(error.response);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    // yield call();\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* signup(action) {\n  try {\n    const result = yield call(registerUser, action.data); // call(함수, 인자);\n    // {email, password, nickname}\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.log('sign_up_failure');\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watch login saga');\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/user.js"],"names":["put","delay","takeLatest","all","fork","call","registerUser","loginUser","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","login","action","result","data","console","log","type","error","response","logout","signup","err","follow","unfollow","watchLogin","watchLogout","watchSignup","watchFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import { put, delay, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { registerUser, loginUser } from '../API/index';\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_SUCCESS,\n\tLOG_IN_FAILURE,\n\tLOG_OUT_REQUEST,\n\tLOG_OUT_SUCCESS,\n\tLOG_OUT_FAILURE,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n\tFOLLOW_REQUEST,\n\tFOLLOW_SUCCESS,\n\tFOLLOW_FAILURE,\n\tUNFOLLOW_REQUEST,\n\tUNFOLLOW_SUCCESS,\n\tUNFOLLOW_FAILURE,\n} from '../actions';\n\nfunction* login(action) {\n\ttry {\n\t\tconst result = yield call(loginUser, action.data);\n\t\t// yield delay(1000);\n\t\tconsole.log(result);\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.log(error.response);\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE,\n\t\t\tdata: error.response.data,\n\t\t});\n\t}\n}\nfunction* logout() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_OUT_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: LOG_OUT_FAILURE,\n\t\t});\n\t}\n}\n\nfunction* signup(action) {\n\ttry {\n\t\tconst result = yield call(registerUser, action.data); // call(함수, 인자);\n\t\t// {email, password, nickname}\n\t\tconsole.log(result);\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS,\n\t\t});\n\t} catch (err) {\n\t\tconsole.log('sign_up_failure');\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n}\nfunction* follow(action) {\n\ttry {\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: FOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: FOLLOW_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* unfollow(action) {\n\ttry {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_FAILURE,\n\t\t});\n\t}\n}\nfunction* watchLogin() {\n\tconsole.log('watch login saga');\n\tyield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n\tyield takeLatest(SIGN_UP_REQUEST, signup);\n}\nfunction* watchFollow() {\n\tyield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n\tyield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchLogin),\n\t\tfork(watchLogout),\n\t\tfork(watchSignup),\n\t\tfork(watchFollow),\n\t\tfork(watchUnfollow),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}