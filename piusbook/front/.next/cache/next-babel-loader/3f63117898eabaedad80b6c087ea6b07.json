{"ast":null,"code":"import { put, delay, takeEvery, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS } from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\n\nfunction* addPost(action) {\n  // console.log('saga add post');\n  try {\n    // const result = yield call();\n    // yield delay(1000);\n    // const id = shortid.generate();\n    console.log(action.data);\n    const result = yield call(uploadPost, action.data); // result {content, PostId, UserId}\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data // data: {\n      // \tid,\n      // \tcontent: action.data,\n      // },\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id // data: id,\n\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response.message\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(uploadComment, action.data); // yield delay(1000);\n    // result = {content, PostId, UserId}\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: action.data,\n\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response.message\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_MINE,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(fetchPost); // yield delay(1000);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data // data: generateDummyPost(10),\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // console.log('saga post');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  // console.log('watching...');\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["put","delay","takeEvery","takeLatest","all","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","shortid","generateDummyPost","uploadPost","uploadComment","fetchPost","addPost","action","console","log","data","result","type","id","error","response","message","addComment","removePost","loadPost","err","watchAddPost","watchAddComment","watchRemovePost","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n\tLOAD_POST_REQUEST,\n\tLOAD_POST_FAILURE,\n\tLOAD_POST_SUCCESS,\n} from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\nfunction* addPost(action) {\n\t// console.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// yield delay(1000);\n\t\t// const id = shortid.generate();\n\t\tconsole.log(action.data);\n\t\tconst result = yield call(uploadPost, action.data);\n\t\t// result {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: {\n\t\t\t// \tid,\n\t\t\t// \tcontent: action.data,\n\t\t\t// },\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t\t// data: id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(uploadComment, action.data);\n\t\t// yield delay(1000);\n\t\t// result = {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: error,\n\t\t});\n\t}\n}\nfunction* loadPost(action) {\n\ttry {\n\t\tconst result = yield call(fetchPost);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POST_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\t// console.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\t// console.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchAddComment),\n\t\tfork(watchRemovePost),\n\t\tfork(watchLoadPost),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}