{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_MINE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../actions';\nimport shortid from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'pius'\n    },\n    content: '#Hello#react made by #pius ',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRL13vWu8GOWHAFISKo9v5oBEU75C9udknN2w&usqp=CAU'\n    }, {\n      id: shortid.generate(),\n      src: 'https://i.pinimg.com/736x/0b/2f/8a/0b2f8a51314ab1ebe0505aee843a33b1.jpg'\n    }, {\n      id: shortid.generate(),\n      src: 'https://pbs.twimg.com/profile_images/1256251357763235842/zY8KO59p_400x400.jpg'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: 'aksfbs'\n      },\n      content: '안녕하세요'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  User: {\n    id: 1,\n    nickname: 'pius'\n  },\n  content: data.content,\n  Image: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  User: {\n    nickname: 'aksfbs'\n  },\n  content: data\n});\n\nexport const addPostRequest = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport const removePostRequest = data => {\n  return {\n    type: REMOVE_POST_REQUEST,\n    data: data\n  };\n};\nexport const addCommentRequest = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // POST\n    case ADD_POST_REQUEST:\n      console.log('add post request, reducer');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostError: action.error\n      });\n    // Comment\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //action.data.content, postId, userId\n        // comment form에서 comment를 추가할때,\n        // store에 있는 mainPosts를 찾아서 추가해준다.\n        const idx = state.mainPosts.findIndex(item => item.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[idx]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[idx] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostDone: true,\n        mainPosts: state.mainPosts.filter(item => item.id === action.data)\n      });\n\n    case REMOVE_POST_FAILURE:\n      return {\n        removePostError: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/reducer/post.js"],"names":["ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_MINE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","shortid","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","dummyPost","data","Image","dummyComment","addPostRequest","type","removePostRequest","addCommentRequest","reducer","state","action","console","log","error","idx","findIndex","item","postId","post","filter"],"mappings":"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","sourcesContent":["import {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_OF_MINE,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n} from '../actions';\nimport shortid from 'shortid';\n\nexport const initialState = {\n\tmainPosts: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tUser: {\n\t\t\t\tid: 1,\n\t\t\t\tnickname: 'pius',\n\t\t\t},\n\t\t\tcontent: '#Hello#react made by #pius ',\n\t\t\tImages: [\n\t\t\t\t{\n\t\t\t\t\tid: shortid.generate(),\n\t\t\t\t\tsrc:\n\t\t\t\t\t\t'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRL13vWu8GOWHAFISKo9v5oBEU75C9udknN2w&usqp=CAU',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: shortid.generate(),\n\t\t\t\t\tsrc:\n\t\t\t\t\t\t'https://i.pinimg.com/736x/0b/2f/8a/0b2f8a51314ab1ebe0505aee843a33b1.jpg',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: shortid.generate(),\n\t\t\t\t\tsrc:\n\t\t\t\t\t\t'https://pbs.twimg.com/profile_images/1256251357763235842/zY8KO59p_400x400.jpg',\n\t\t\t\t},\n\t\t\t],\n\t\t\tComments: [\n\t\t\t\t{\n\t\t\t\t\tid: shortid.generate(),\n\t\t\t\t\tUser: {\n\t\t\t\t\t\tid: shortid.generate(),\n\t\t\t\t\t\tnickname: 'aksfbs',\n\t\t\t\t\t},\n\t\t\t\t\tcontent: '안녕하세요',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\timagePaths: [],\n\taddPostLoading: false,\n\taddPostDone: false,\n\taddPostError: null,\n\taddCommentLoading: false,\n\taddCommentDone: false,\n\taddCommentError: null,\n\tremovePostLoading: false,\n\tremovePostDone: false,\n\tremovePostError: null,\n};\n\nconst dummyPost = data => ({\n\tid: data.id,\n\tUser: {\n\t\tid: 1,\n\t\tnickname: 'pius',\n\t},\n\tcontent: data.content,\n\tImage: [],\n\tComments: [],\n});\n\nconst dummyComment = data => ({\n\tid: shortid.generate(),\n\tUser: {\n\t\tnickname: 'aksfbs',\n\t},\n\tcontent: data,\n});\nexport const addPostRequest = data => {\n\treturn {\n\t\ttype: ADD_POST_REQUEST,\n\t\tdata: data,\n\t};\n};\n\nexport const removePostRequest = data => {\n\treturn {\n\t\ttype: REMOVE_POST_REQUEST,\n\t\tdata: data,\n\t};\n};\nexport const addCommentRequest = data => {\n\treturn {\n\t\ttype: ADD_COMMENT_REQUEST,\n\t\tdata: data,\n\t};\n};\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\t// POST\n\t\tcase ADD_POST_REQUEST:\n\t\t\tconsole.log('add post request, reducer');\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taddPostLoading: true,\n\t\t\t\taddPostDone: false,\n\t\t\t};\n\t\tcase ADD_POST_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmainPosts: [dummyPost(action.data), ...state.mainPosts],\n\t\t\t\taddPostLoading: false,\n\t\t\t\taddPostDone: true,\n\t\t\t};\n\t\tcase ADD_POST_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taddPostError: action.error,\n\t\t\t};\n\t\t// Comment\n\t\tcase ADD_COMMENT_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taddCommentLoading: true,\n\t\t\t\taddCommentDone: false,\n\t\t\t\taddCommentError: null,\n\t\t\t};\n\t\tcase ADD_COMMENT_SUCCESS: {\n\t\t\t//action.data.content, postId, userId\n\t\t\t// comment form에서 comment를 추가할때,\n\t\t\t// store에 있는 mainPosts를 찾아서 추가해준다.\n\t\t\tconst idx = state.mainPosts.findIndex(\n\t\t\t\titem => item.id === action.data.postId,\n\t\t\t);\n\t\t\tconst post = { ...state.mainPosts[idx] };\n\t\t\tpost.Comments = [dummyComment(action.data.content), ...post.Comments];\n\t\t\tconst mainPosts = [...state.mainPosts];\n\t\t\tmainPosts[idx] = post;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmainPosts,\n\t\t\t\taddCommentLoading: false,\n\t\t\t\taddCommentDone: true,\n\t\t\t};\n\t\t}\n\t\tcase ADD_COMMENT_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taddCommentError: action.error,\n\t\t\t};\n\t\tcase REMOVE_POST_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tremovePostLoading: true,\n\t\t\t\tremovePostDone: false,\n\t\t\t};\n\t\tcase REMOVE_POST_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tremovePostLoading: false,\n\t\t\t\tremovePostDone: true,\n\t\t\t\tmainPosts: state.mainPosts.filter(item => item.id === action.data),\n\t\t\t};\n\t\tcase REMOVE_POST_FAILURE:\n\t\t\treturn {\n\t\t\t\tremovePostError: action.error,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}