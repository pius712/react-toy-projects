{"ast":null,"code":"import { put, delay, takeEvery, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE } from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\n\nfunction* addPost(action) {\n  // console.log('saga add post');\n  try {\n    // const result = yield call();\n    // yield delay(1000);\n    // const id = shortid.generate();\n    const result = yield call(uploadPost, action.data); // result {content, PostId, UserId}\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data // data: {\n      // \tid,\n      // \tcontent: action.data,\n      // },\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id // data: id,\n\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response.message\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(uploadComment, action.data); // yield delay(1000);\n    // result = {content, PostId, UserId}\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: action.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.message\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_MINE,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(fetchPost); // yield delay(1000);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data // data: generateDummyPost(10),\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* likePost() {\n  try {\n    yield call(likePostAPI);\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.message\n    });\n  }\n}\n\nfunction* unlikePost() {\n  try {\n    yield call(unlikePostAPI);\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.message\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // console.log('saga post');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  // console.log('watching...');\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["put","delay","takeEvery","takeLatest","all","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","shortid","generateDummyPost","uploadPost","uploadComment","fetchPost","addPost","action","result","data","type","id","error","response","message","addComment","err","console","removePost","loadPost","likePost","likePostAPI","unlikePost","unlikePostAPI","watchAddPost","watchAddComment","watchRemovePost","watchLoadPost","watchLikePost","watchUnlikePost","postSaga"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n\tcall,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n\tLOAD_POST_REQUEST,\n\tLOAD_POST_FAILURE,\n\tLOAD_POST_SUCCESS,\n\tLIKE_POST_REQUEST,\n\tUNLIKE_POST_REQUEST,\n\tLIKE_POST_FAILURE,\n\tUNLIKE_POST_FAILURE,\n} from '../actions/index';\nimport shortid from 'shortid';\nimport { generateDummyPost } from '../reducer/post';\nimport { uploadPost, uploadComment, fetchPost } from '../API/index';\nfunction* addPost(action) {\n\t// console.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// yield delay(1000);\n\t\t// const id = shortid.generate();\n\t\tconst result = yield call(uploadPost, action.data);\n\t\t// result {content, PostId, UserId}\n\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: {\n\t\t\t// \tid,\n\t\t\t// \tcontent: action.data,\n\t\t\t// },\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t\t// data: id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(uploadComment, action.data);\n\t\t// yield delay(1000);\n\t\t// result = {content, PostId, UserId}\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: action.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.message,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: error,\n\t\t});\n\t}\n}\nfunction* loadPost(action) {\n\ttry {\n\t\tconst result = yield call(fetchPost);\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t\t// data: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POST_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* likePost() {\n\ttry {\n\t\tyield call(likePostAPI);\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_FAILURE,\n\t\t\tdata: err.response.message,\n\t\t});\n\t}\n}\nfunction* unlikePost() {\n\ttry {\n\t\tyield call(unlikePostAPI);\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNLIKE_POST_FAILURE,\n\t\t\tdata: err.response.message,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\t// console.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\t// console.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLikePost() {\n\tyield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchAddComment),\n\t\tfork(watchRemovePost),\n\t\tfork(watchLoadPost),\n\t\tfork(watchLikePost),\n\t\tfork(watchUnlikePost),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}