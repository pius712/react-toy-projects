{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', HYDRATE);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      {\n        // 리듀서는 결국 state, action을 받는 함수이다.\n        // combineReducer를 호출하면 이 함수가 나온다.\n        var combinedReducer = combineReducers(user, post);\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/reducer/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKP,OAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBT,OAAvB;AACA,6CACIK,KADJ,GAEIC,MAAM,CAACI,OAFX;;AAKD;AAAS;AACR;AACA;AACA,YAAMC,eAAe,GAAGV,eAAe,CAACC,IAAD,EAAOC,IAAP,CAAvC;AACA,eAAOQ,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACA;AAbF;AAeA,CAhBD;;AAkBA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\nconst rootReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase HYDRATE:\n\t\t\tconsole.log('HYDRATE', HYDRATE);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t};\n\n\t\tdefault: {\n\t\t\t// 리듀서는 결국 state, action을 받는 함수이다.\n\t\t\t// combineReducer를 호출하면 이 함수가 나온다.\n\t\t\tconst combinedReducer = combineReducers(user, post);\n\t\t\treturn combinedReducer(state, action);\n\t\t}\n\t}\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}