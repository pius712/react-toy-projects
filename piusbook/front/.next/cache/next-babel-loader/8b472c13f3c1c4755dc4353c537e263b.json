{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../actions';\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('lgoin saga');\n          _context.prev = 1;\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context.t0.response.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 8]]);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signup() {\n  return _regeneratorRuntime.wrap(function signup$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('saga');\n          _context4.next = 3;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/user.js"],"names":["login","logout","signup","watchLogin","watchLogout","watchSignup","userSaga","put","delay","takeLatest","all","fork","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","action","console","log","type","data","response","message"],"mappings":";;oDAYUA,K;qDAgBAC,M;qDAaAC,M;qDAcAC,U;qDAKAC,W;qDAGAC,W;qDAIeC,Q;;AAnEzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,SACCC,cADD,EAECC,cAFD,EAGCC,cAHD,EAICC,eAJD,EAKCC,eALD,EAMCC,eAND,EAOCC,eAPD,EAQCC,eARD,EASCC,eATD,QAUO,YAVP;;AAWA,SAAUpB,KAAV,CAAgBqB,MAAhB;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AADD;AAAA;AAIE,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAJF;AAAA;AAKE,iBAAMD,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAEX,cADG;AAETY,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFJ,WAAD,CAAT;;AALF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUE,iBAAMlB,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAEV,cADG;AAETW,YAAAA,IAAI,EAAE,YAAMC,QAAN,CAAeC;AAFZ,WAAD,CAAT;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAU1B,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAER;AADG,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQE,iBAAMT,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAEP;AADG,WAAD,CAAT;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUf,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAEL;AADG,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQE,iBAAMZ,GAAG,CAAC;AACTiB,YAAAA,IAAI,EAAEJ;AADG,WAAD,CAAT;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUjB,UAAV;AAAA;AAAA;AAAA;AAAA;AACCmB,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AADD;AAEC,iBAAMd,UAAU,CAACG,cAAD,EAAiBZ,KAAjB,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUI,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,UAAU,CAACM,eAAD,EAAkBd,MAAlB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMI,UAAU,CAACM,eAAD,EAAkBb,MAAlB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMI,GAAG,CAAC,CAACC,IAAI,CAACR,UAAD,CAAL,EAAmBQ,IAAI,CAACP,WAAD,CAAvB,EAAsCO,IAAI,CAACN,WAAD,CAA1C,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_SUCCESS,\n\tLOG_IN_FAILURE,\n\tLOG_OUT_REQUEST,\n\tLOG_OUT_SUCCESS,\n\tLOG_OUT_FAILURE,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n} from '../actions';\nfunction* login(action) {\n\tconsole.log('lgoin saga');\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE,\n\t\t\tdata: error.response.message,\n\t\t});\n\t}\n}\nfunction* logout() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_OUT_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: LOG_OUT_FAILURE,\n\t\t});\n\t}\n}\nfunction* signup() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t});\n\t}\n}\n\nfunction* watchLogin() {\n\tconsole.log('saga');\n\tyield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n\tyield takeLatest(LOG_OUT_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n\tyield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}\n"]},"metadata":{},"sourceType":"module"}