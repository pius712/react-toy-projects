{"ast":null,"code":"import { put, delay, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_MINE } from '../actions/index';\nimport shortid from 'shortid';\n\nfunction* addPost(action) {\n  console.log('saga add post');\n\n  try {\n    // const result = yield call();\n    // console.log('sga add post');\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response.message\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call();\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response.message\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_MINE,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  console.log('saga post');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  console.log('watching...');\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["put","delay","takeEvery","takeLatest","all","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_MINE","shortid","addPost","action","console","log","id","generate","type","data","content","error","response","message","addComment","removePost","watchAddPost","watchAddComment","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n\tADD_POST_TO_ME,\n\tREMOVE_POST_REQUEST,\n\tREMOVE_POST_SUCCESS,\n\tREMOVE_POST_FAILURE,\n\tREMOVE_POST_OF_MINE,\n} from '../actions/index';\nimport shortid from 'shortid';\n\nfunction* addPost(action) {\n\tconsole.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// console.log('sga add post');\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: error.response.message,\n\t\t});\n\t}\n}\n\nfunction* removePost(action) {\n\ttry {\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_MINE,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\tdata: error,\n\t\t});\n\t}\n}\nfunction* watchAddPost() {\n\tconsole.log('saga post');\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n\tconsole.log('watching...');\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n\tyield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}