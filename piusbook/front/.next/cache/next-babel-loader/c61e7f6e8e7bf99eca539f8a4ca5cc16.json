{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { put, delay, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../actions/index';\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('saga add post');\n          _context.prev = 1;\n          _context.next = 4;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 10;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 6]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('saga post');\n          _context3.next = 3;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","put","delay","takeEvery","takeLatest","all","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","action","console","log","type","data","error","response"],"mappings":";;oDAiBUA,O;qDAiBAC,U;qDAgBAC,Y;qDAIAC,e;qDAIeC,Q;;AA1DzB,SACCC,GADD,EAECC,KAFD,EAGCC,SAHD,EAICC,UAJD,EAKCC,GALD,EAMCC,IAND,QAOO,oBAPP;AAQA,SACCC,gBADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,mBAJD,EAKCC,mBALD,EAMCC,mBAND,QAOO,kBAPP;;AASA,SAAUhB,OAAV,CAAkBiB,MAAlB;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AADD;AAAA;AAME,iBAAMd,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAER,gBADG;AAETS,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFJ,WAAD,CAAT;;AANF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWE,iBAAMhB,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAEP,gBADG;AAETS,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeF;AAFb,WAAD,CAAT;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUpB,UAAV,CAAqBgB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMX,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAEL,mBADG;AAETM,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFJ,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMhB,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAEJ,mBADG;AAETM,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeF;AAFb,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUnB,YAAV;AAAA;AAAA;AAAA;AAAA;AACCgB,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADD;AAEC,iBAAMZ,SAAS,CAACI,gBAAD,EAAmBX,OAAnB,CAAf;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,UAAU,CAACM,mBAAD,EAAsBb,UAAtB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMK,GAAG,CAAC,CAACC,IAAI,CAACR,YAAD,CAAL,EAAqBQ,IAAI,CAACP,eAAD,CAAzB,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n\tput,\n\tdelay,\n\ttakeEvery,\n\ttakeLatest,\n\tall,\n\tfork,\n} from 'redux-saga/effects';\nimport {\n\tADD_POST_REQUEST,\n\tADD_POST_SUCCESS,\n\tADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST,\n\tADD_COMMENT_SUCCESS,\n\tADD_COMMENT_FAILURE,\n} from '../actions/index';\n\nfunction* addPost(action) {\n\tconsole.log('saga add post');\n\ttry {\n\t\t// const result = yield call();\n\t\t// console.log('sga add post');\n\t\t// yield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: error.response.data,\n\t\t});\n\t}\n}\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: error.response.data,\n\t\t});\n\t}\n}\n\nfunction* watchAddPost() {\n\tconsole.log('saga post');\n\tyield takeEvery(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n\tyield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}