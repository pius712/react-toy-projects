{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducer/index.js';\nimport rootSaga from '../sagas'; // preloadedState, { isServer, req = null }\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middleware)) : composeWithDevTools(applyMiddleware(...middleware));\n  const store = createStore(reducer, enhancer); // if (req || !isServer) {\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); // }\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middleware","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,MAAM;AAC5B,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,QAAMK,UAAU,GAAG,CAACD,cAAD,CAAnB;AAEA,QAAME,QAAQ,GACb,QACGR,OAAO,CAACD,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CADV,GAEGN,mBAAmB,CAACF,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAHvB;AAKA,QAAME,KAAK,GAAGX,WAAW,CAACK,OAAD,EAAUK,QAAV,CAAzB,CAT4B,CAU5B;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB,CAX4B,CAY5B;;AACA,SAAOK,KAAP;AACA,CAdD;;AAeA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAC7CQ,EAAAA,KAAK;AADwC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducer/index.js';\nimport rootSaga from '../sagas';\n\n// preloadedState, { isServer, req = null }\nconst configureStore = () => {\n\tconst sagaMiddleware = createSagaMiddleware();\n\tconst middleware = [sagaMiddleware];\n\n\tconst enhancer =\n\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t? compose(applyMiddleware(...middleware))\n\t\t\t: composeWithDevTools(applyMiddleware(...middleware));\n\n\tconst store = createStore(reducer, enhancer);\n\t// if (req || !isServer) {\n\tstore.sagaTask = sagaMiddleware.run(rootSaga);\n\t// }\n\treturn store;\n};\nconst wrapper = createWrapper(configureStore, {\n\tdebug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}