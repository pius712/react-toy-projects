{"ast":null,"code":"import { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../actions';\n\nfunction* login(action) {\n  console.log('lgoin saga');\n\n  try {\n    // const result = yield call();\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.message\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    // yield call();\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* signup() {\n  try {\n    // yield call();\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch {\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err\n    });\n  }\n}\n\nfunction* unfollow() {\n  try {\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watch login saga');\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(LOG_OUT_REQUEST, signup);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(FOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["/Users/pius712/Documents/GitHub/react-todo-list/piusbook/front/sagas/user.js"],"names":["put","delay","takeLatest","all","fork","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","login","action","console","log","type","data","error","response","message","logout","signup","follow","err","unfollow","watchLogin","watchLogout","watchSignup","watchFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import { put, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_SUCCESS,\n\tLOG_IN_FAILURE,\n\tLOG_OUT_REQUEST,\n\tLOG_OUT_SUCCESS,\n\tLOG_OUT_FAILURE,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n\tFOLLOW_REQUEST,\n\tFOLLOW_SUCCESS,\n\tFOLLOW_FAILURE,\n\tUNFOLLOW_SUCCESS,\n\tUNFOLLOW_FAILURE,\n} from '../actions';\nfunction* login(action) {\n\tconsole.log('lgoin saga');\n\ttry {\n\t\t// const result = yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE,\n\t\t\tdata: error.response.message,\n\t\t});\n\t}\n}\nfunction* logout() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOG_OUT_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: LOG_OUT_FAILURE,\n\t\t});\n\t}\n}\nfunction* signup() {\n\ttry {\n\t\t// yield call();\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS,\n\t\t});\n\t} catch {\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t});\n\t}\n}\nfunction* follow(action) {\n\ttry {\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: FOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: FOLLOW_FAILURE,\n\t\t\tdata: err,\n\t\t});\n\t}\n}\nfunction* unfollow() {\n\ttry {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: UNFOLLOW_FAILURE,\n\t\t});\n\t}\n}\nfunction* watchLogin() {\n\tconsole.log('watch login saga');\n\tyield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n\tyield takeLatest(LOG_OUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n\tyield takeLatest(LOG_OUT_REQUEST, signup);\n}\nfunction* watchFollow() {\n\tyield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n\tyield takeLatest(FOLLOW_REQUEST, unfollow);\n}\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchLogin),\n\t\tfork(watchLogout),\n\t\tfork(watchSignup),\n\t\tfork(watchFollow),\n\t\tfork(watchUnfollow),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}