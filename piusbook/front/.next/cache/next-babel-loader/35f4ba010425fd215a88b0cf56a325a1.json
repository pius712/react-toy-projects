{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, EDIT_NICKNAME_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_MINE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../actions/index.js';\nexport const initialState = {\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  signUpDone: false,\n  signUpError: null,\n  editNicknameLoading: false,\n  editNicknameDone: false,\n  editNicknameError: null,\n  me: null,\n  userInfo: null,\n  signupData: null,\n  loginData: null,\n  followLoading: false,\n  followDone: false,\n  followError: null,\n  unfollowLoading: false,\n  unfollowDone: false,\n  unfollowError: null,\n  loadMyInfoLoading: false,\n  loadMyInfoDone: false,\n  loadMyInfoError: null,\n  loadFollowingsLoading: false,\n  loadFollowingsDone: false,\n  loadFollowingsError: null,\n  loadFollowersLoading: false,\n  loadFollowersDone: false,\n  loadFollowersError: null,\n  removeFollowerLoading: false,\n  removeFollowerDone: false,\n  removeFollowerError: null,\n  loadUserLoading: false,\n  // 유저 정보 가져오기 시도중\n  loadUserDone: false,\n  loadUserError: null\n};\n\nconst dummyUser = data => _objectSpread(_objectSpread({}, data), {}, {\n  nickname: 'pius',\n  id: 1,\n  Posts: [],\n  Followings: [{\n    nickname: 'loopy'\n  }, {\n    nickname: 'dopa'\n  }, {\n    nickname: 'apdo'\n  }],\n  Followers: [{\n    nickname: 'loopy'\n  }, {\n    nickname: 'dopa'\n  }, {\n    nickname: 'apdo'\n  }]\n});\n\nexport const loginRequestAction = data => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  };\n};\nexport const logoutRequestAction = () => {\n  return {\n    type: LOG_OUT_REQUEST\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draftState => {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        draftState.logInLoading = true;\n        draftState.logInDone = false;\n        draftState.logInError = null;\n        break;\n\n      case LOG_IN_SUCCESS:\n        draftState.logInLoading = false;\n        draftState.logInDone = true;\n        draftState.me = action.data;\n        break;\n\n      case LOG_IN_FAILURE:\n        draftState.logInLoading = false;\n        draftState.logInDone = false;\n        draftState.logInError = action.data;\n        draftState.me = null;\n        break;\n      // GET /user 를 통해서 쿠기를 보내서 내 정보를 받는 것\n\n      case LOAD_MY_INFO_REQUEST:\n        draftState.loadMyInfoLoading = true;\n        draftState.loadMyInfoDone = false;\n        draftState.loadMyInfoError = null;\n        break;\n\n      case LOAD_MY_INFO_SUCCESS:\n        draftState.loadMyInfoLoading = false;\n        draftState.loadMyInfoDone = true;\n        draftState.me = action.data;\n        break;\n\n      case LOAD_MY_INFO_FAILURE:\n        draftState.loadMyInfoLoading = false;\n        draftState.loadMyInfoDone = false;\n        draftState.loadMyInfoError = action.data;\n        draftState.me = null;\n        break;\n\n      case LOG_OUT_REQUEST:\n        draftState.logOutLoading = true;\n        draftState.logInDone = false;\n        draftState.me = null;\n        break;\n\n      case LOG_OUT_SUCCESS:\n        draftState.logOutLoading = false;\n        draftState.logInDone = false;\n        draftState.me = null;\n        break;\n\n      case LOG_OUT_FAILURE:\n        draftState.logOutLoading = false;\n        draftState.logOutError = action.data;\n        break;\n\n      case SIGN_UP_REQUEST:\n        draftState.signUpLoading = true;\n        draftState.signUpDone = false;\n        break;\n\n      case SIGN_UP_SUCCESS:\n        draftState.signUpLoading = false;\n        draftState.signUpDone = true;\n        break;\n\n      case SIGN_UP_FAILURE:\n        draftState.signUpError = action.data;\n        break;\n\n      case EDIT_NICKNAME_REQUEST:\n        draftState.editNicknameLoading = true;\n        draftState.editNicknameDone = false;\n        draftState.editNicknameError = null;\n        break;\n\n      case EDIT_NICKNAME_SUCCESS:\n        draftState.editNicknameLoading = false;\n        draftState.editNicknameDone = true;\n        draftState.me.nickname = action.data.nickname;\n        break;\n\n      case EDIT_NICKNAME_FAILURE:\n        draftState.editNicknameLoading = false;\n        draftState.editNicknameError = action.error;\n        break;\n\n      case ADD_POST_TO_ME:\n        {\n          const newPost = {\n            id: action.data\n          };\n          draftState.me.Posts.unshift(newPost);\n          break;\n        }\n\n      case REMOVE_POST_OF_MINE:\n        {\n          draftState.me.Posts = draftState.me.Posts.filter(item => item.id !== action.data);\n          break;\n        }\n\n      case FOLLOW_REQUEST:\n        draftState.followLoading = true;\n        draftState.followDone = false;\n        draftState.followError = null;\n        break;\n\n      case FOLLOW_SUCCESS:\n        draftState.followLoading = false;\n        draftState.me.Followings.push({\n          id: action.data.FollowingId\n        });\n        draftState.followDone = true;\n        break;\n\n      case FOLLOW_FAILURE:\n        draftState.followLoading = false;\n        draftState.followDone = false;\n        break;\n\n      case UNFOLLOW_REQUEST:\n        draftState.unfollowLoading = true;\n        draftState.unfollowDone = false;\n        draftState.unfollowError = null;\n        break;\n\n      case UNFOLLOW_SUCCESS:\n        {\n          const idx = draftState.me.Followings.findIndex(following => following.id === action.data.FollowingId);\n          draftState.unfollowLoading = false;\n          draftState.me.Followings.splice(idx, 1);\n          draftState.unfollowDone = true;\n          break;\n        }\n\n      case UNFOLLOW_FAILURE:\n        draftState.unfollowLoading = false;\n        draftState.unfollowDone = false;\n        break;\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        draftState.loadFollowingsLoading = true;\n        draftState.loadFollowingsDone = false;\n        draftState.loadFollowingsError = null;\n        break;\n      // 팔로잉 불러오기\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        draftState.loadFollowingsLoading = false;\n        draftState.loadFollowingsDone = true;\n        draftState.me.Followings = action.data;\n        break;\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        draftState.loadFollowingsLoading = false;\n        draftState.loadFollowingsDone = false;\n        draftState.loadFollowingsError = action.data;\n        break;\n      // 팔로워 불러오기\n\n      case LOAD_FOLLOWERS_REQUEST:\n        draftState.loadFollowersLoading = true;\n        draftState.loadFollowersDone = false;\n        draftState.loadFollowersError = null;\n        break;\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        console.log('followers', action.data);\n        draftState.loadFollowersLoading = false;\n        draftState.loadFollowersDone = true;\n        draftState.me.Followers = action.data;\n        break;\n\n      case LOAD_FOLLOWERS_FAILURE:\n        draftState.loadFollowersLoading = false;\n        draftState.loadFollowersDone = false;\n        draftState.loadFollowersError = action.data;\n        break;\n\n      case REMOVE_FOLLOWER_REQUEST:\n        draftState.removeFollowerLoading = true;\n        draftState.removeFollowerDone = false;\n        draftState.removeFollowerError = null;\n        break;\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        draftState.removeFollowerDone = true;\n        draftState.removeFollowerLoading = false;\n        draftState.me.Followers = draftState.me.Followers.filter(follower => follower.id === action.data.UserId);\n        break;\n\n      case REMOVE_FOLLOWER_FAILURE:\n        draftState.removeFollowerLoading = false;\n        draftState.removeFollowerDone = false;\n        draftState.removeFollowerError = action.data;\n        break;\n\n      case LOAD_USER_REQUEST:\n        draftState.loadUserLoading = true;\n        draftState.loadUserError = null;\n        draftState.loadUserDone = false;\n        break;\n\n      case LOAD_USER_SUCCESS:\n        draftState.loadUserLoading = false;\n        draftState.userInfo = action.data;\n        draftState.loadUserDone = true;\n        break;\n\n      case LOAD_USER_FAILURE:\n        draftState.loadUserLoading = false;\n        draftState.loadUserError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}